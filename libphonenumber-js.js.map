{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 0440ca4972538d01d3eb","webpack:///./es6/metadata.js","webpack:///./es6/common.js","webpack:///./es6/parse.js","webpack:///./es6/types.js","webpack:///./es6/RFC3966.js","webpack:///./es6/format.js","webpack:///./metadata.min.json","webpack:///./es6/AsYouType.js","webpack:///./es6/findPhoneNumbers.js","webpack:///./es6/getCountryCallingCode.js","webpack:///./es6/validate.js","webpack:///./index.es6.js","webpack:///./~/semver-compare/index.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","V2","Metadata","metadata","countries","Error","v1","version","v2","value","hasCountry","country","undefined","_country","country_metadata","countryCallingCode","nationalNumberPattern","possibleLengths","formats","_this","map","_","Format","nationalPrefix","nationalPrefixFormattingRule","nationalPrefixForParsing","nationalPrefixTransformRule","nationalPrefixIsOptionalWhenFormatting","leadingDigits","types","hasTypes","type","_type","getType","Type","countryCallingCodes","country_phone_code_to_countries","country_calling_codes","chooseCountryByCountryCallingCode","country_calling_code","selectedCountry","format","_format","pattern","leadingDigitsPatterns","nationalPrefixIsMandatoryWhenFormatting","usesNationalPrefix","test","replace","internationalFormat","parse_phone_number_digits","parse_national_number_and_country_calling_code","matches_entirely","create_extension_pattern","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","LEADING_PLUS_CHARS_PATTERN","RegExp","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","DIGIT_MAPPINGS","number","drop_and_substitute_characters","slice","text","arguments","regular_expression","matched_groups","match","replacements","replaced","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","character","replacement","toUpperCase","err","return","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","purpose","single_extension_characters","parse","is_viable_phone_number","extract_formatted_phone_number","strip_national_prefix_and_carrier_code","find_country_code","_extends","assign","source","hasOwnProperty","call","MIN_LENGTH_FOR_NSN","MAX_INPUT_STRING_LENGTH","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_PATTERN","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","default_options","arg_1","arg_2","arg_3","arg_4","_sort_out_arguments","sort_out_arguments","options","defaultCountry","_parse_input","parse_input","formatted_phone_number","ext","_parse_phone_number","parse_phone_number","national_number","carrierCode","extended","valid","result","possible","is_possible_number","phone","starts_at","search","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","national_phone_number","possible_countries","original_country","_find_country_code","strip_extension","start","number_without_extension","matches","is_international","indexOf","with_extension_stripped","default_country","_parse_national_numbe","_parse_national_numbe2","parse_national_number","carrier_code","_strip_national_prefi","potential_national_number","get_number_type","is_of_type","check_number_length_for_type","_typeof","obj","constructor","non_fixed_line_types","input","is_object","type_info","possible_lengths","test_number_length_for_type","mobile_type","merge_arrays","actual_length","minimum_length","a","b","merged","Set","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","add","Array","from","sort","parseRFC3966","formatRFC3966","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_i","_s","push","isArray","split","part","_part$split","_part$split2","name","_ref","format_national_number_using_format","choose_format_for_number","local_to_international_style","formatExtension","extension","arg_5","format_type","format_national_number","add_extension","FIRST_GROUP_PATTERN","international","enforce_national_prefix","format_pattern_matcher","national_prefix_may_be_omitted","formatted_number","format_as","available_formats","last_leading_digits_pattern","local","trim","close_dangling_braces","count_occurences","repeat","DUMMY_DIGIT","DUMMY_DIGIT_MATCHER","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","DIGIT_PLACEHOLDER_MATCHER_GLOBAL","CHARACTER_CLASS_PATTERN","STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","country_code","reset","extracted_number","current_output","process_input","parsed_input","reset_countriness","extract_country_calling_code","initialize_phone_number_formats_for_this_country_calling_code","reset_format","determine_the_country","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","should_format","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","template","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","reset_country","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","leading_digits_pattern_count","leading_digits_pattern_index","Math","min","leading_digits_pattern","matcher","is_format_applicable","create_formatting_template","full_number","formatted_national_number","national_number_rule","validation_result","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","digit","getNationalNumber","cut_before","retained_template","opening_braces","closing_braces","dangling_braces","symbol","string","count","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","times","findPhoneNumbers","searchPhoneNumbers","_defineProperty","WHITESPACE_IN_THE_BEGINNING_PATTERN","WHITESPACE_IN_THE_END_PATTERN","PhoneNumberSearch","phones","hasNext","_sort_out_arguments2","state","regexp","find","startsAt","index","endsAt","last_match","is_valid","default","getNumberType","isValidNumber","getCountryCallingCode","getPhoneCode","getPhoneCodeCustom","parameters","apply","create"],"mappings":"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","file":"libphonenumber-js.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"libphonenumber\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"libphonenumber\"] = factory();\n\telse\n\t\troot[\"libphonenumber\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0440ca4972538d01d3eb","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from 'semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\t// Metadata is required.\n\t\tif (!metadata || !metadata.countries) {\n\t\t\tthrow new Error('Metadata is required');\n\t\t}\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version; // && compare(version, V3) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this.country_metadata[this.v1 ? 2 : 3] || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : 4];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : 6] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : 7];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this.country_metadata[this.v1 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : 9];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\treturn this.types() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\tthis.usesNationalPrefix() &&\n\t\t\t// Or maybe national prefix is optional for this format\n\t\t\t!this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\t// Check that national prefix formatting rule is not a dummy one\n\t\t\treturn this.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s)\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n//# sourceMappingURL=metadata.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/metadata.js","// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\nvar LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+');\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGIT_MAPPINGS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n\n\n\t/**\r\n  * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n  * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n  *\r\n  * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n  *\r\n  * @param  {string} number\r\n  * @return {string}\r\n  */\n};export function parse_phone_number_digits(number) {\n\treturn (LEADING_PLUS_CHARS_PATTERN.test(number) ? '+' : '') + drop_and_substitute_characters(number, DIGIT_MAPPINGS);\n}\n\n// Parses a formatted phone number\n// and returns `{ country_calling_code, number }`\n// where `number` is the national (significant) phone number.\n//\n// (aka `maybeExtractCountryPhoneCode`)\n//\nexport function parse_national_number_and_country_calling_code(number, metadata) {\n\tnumber = parse_phone_number_digits(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\treturn { number: number };\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n\n// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matches_entirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\tif (typeof regular_expression === 'string') {\n\t\tregular_expression = '^(?:' + regular_expression + ')$';\n\t}\n\n\tvar matched_groups = text.match(regular_expression);\n\treturn matched_groups !== null && matched_groups[0].length === text.length;\n}\n\n// For any character not being part of `replacements`\n// it is removed from the phone number.\nfunction drop_and_substitute_characters(text, replacements) {\n\tvar replaced = '';\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = text[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar character = _step.value;\n\n\t\t\tvar replacement = replacements[character.toUpperCase()];\n\n\t\t\tif (replacement) {\n\t\t\t\treplaced += replacement;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn replaced;\n}\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport function create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n//# sourceMappingURL=common.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/common.js","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { parse_phone_number_digits, parse_national_number_and_country_calling_code, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MAX_LENGTH_FOR_NSN, matches_entirely, create_extension_pattern } from './common';\n\nimport Metadata from './metadata';\n\nimport get_number_type, { check_number_length_for_type } from './types';\n\nimport { parseRFC3966 } from './RFC3966';\n\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = 2;\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nvar EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\nvar default_options = {\n\tcountry: {}\n\n\t// `options`:\n\t//  {\n\t//    country:\n\t//    {\n\t//      restrict - (a two-letter country code)\n\t//                 the phone number must be in this country\n\t//\n\t//      default - (a two-letter country code)\n\t//                default country to use for phone number parsing and validation\n\t//                (if no country code could be derived from the phone number)\n\t//    }\n\t//  }\n\t//\n\t// Returns `{ country, number }`\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// parse('8 (800) 555-35-35', 'RU')\n\t// parse('8 (800) 555-35-35', 'RU', metadata)\n\t// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n\t// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n\t// parse('+7 800 555 35 35')\n\t// parse('+7 800 555 35 35', metadata)\n\t// ```\n\t//\n};export default function parse(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\t// Validate `defaultCountry`.\n\n\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text),\n\t    formatted_phone_number = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formatted_phone_number) {\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n\t    country = _parse_phone_number.country,\n\t    national_number = _parse_phone_number.national_number,\n\t    countryCallingCode = _parse_phone_number.countryCallingCode,\n\t    carrierCode = _parse_phone_number.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\treturn options.extended ? { countryCallingCode: countryCallingCode } : {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (national_number.length < MIN_LENGTH_FOR_NSN || national_number.length > MAX_LENGTH_FOR_NSN) {\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Check if national phone number pattern matches the number\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matches_entirely(national_number, new RegExp(metadata.nationalNumberPattern())) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, national_number, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(national_number, countryCallingCode !== undefined, metadata),\n\t\tphone: national_number,\n\t\text: ext\n\t};\n}\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport function is_viable_phone_number(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && matches_entirely(number, VALID_PHONE_NUMBER_PATTERN);\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text) {\n\tif (!text || text.length > MAX_INPUT_STRING_LENGTH) {\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// `national_prefix_for_parsing` capturing groups\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\n\t// If the national number tranformation is needed then do it.\n\t//\n\t// I don't know what did they mean by `&& national_prefix_matcher[captured_groups_count]`.\n\t// https://github.com/googlei18n/libphonenumber/blob/d978e59c2e6b1ddfb6816cd190e1b62d9a96bc3b/javascript/i18n/phonenumbers/phonenumberutil.js#L3885\n\t// https://github.com/googlei18n/libphonenumber/blob/d978e59c2e6b1ddfb6816cd190e1b62d9a96bc3b/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2906\n\t//\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// Else, no transformation is necessary,\n\t// and just strip the national prefix.\n\telse {\n\t\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matches_entirely(number, national_number_rule) &&\n\t// \t\t!matches_entirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\tvar original_country = metadata.selectedCountry();\n\tvar country = _find_country_code(possible_countries, national_phone_number, metadata);\n\tmetadata.country(original_country);\n\treturn country;\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = possible_countries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar country = _step.value;\n\n\t\t\tmetadata.country(country);\n\n\t\t\t// Leading digits check would be the simplest one\n\t\t\tif (metadata.leadingDigits()) {\n\t\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\t\treturn country;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Else perform full validation with all of those\n\t\t\t// fixed-line/mobile/etc regular expressions.\n\t\t\telse if (get_number_type({ phone: national_phone_number, country: country }, metadata.metadata)) {\n\t\t\t\t\treturn country;\n\t\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Sort out arguments\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4) {\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parse('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A phone number for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed\n\t// then move it to `options`.\n\t// `parse('88005553535', 'RU', [options], metadata)`.\n\tif (typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, arg_3);\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = { defaultCountry: arg_2 };\n\t\t\tmetadata = arg_3;\n\t\t}\n\t}\n\t// No \"default country\" argument is being passed.\n\t// International phone number is passed.\n\t// `parse('+78005553535', [options], metadata)`.\n\telse {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t}\n\n\t// Metadata is required.\n\tif (!metadata || !metadata.countries) {\n\t\tthrow new Error('Metadata is required');\n\t}\n\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, default_options, options);\n\t} else {\n\t\toptions = default_options;\n\t}\n\n\treturn { text: text, options: options, metadata: new Metadata(metadata) };\n}\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nfunction strip_extension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\t/* istanbul ignore if - seems a bit of a redundant check */\n\tif (!is_viable_phone_number(number_without_extension)) {\n\t\treturn {};\n\t}\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n\nfunction is_possible_number(national_number, is_international, metadata) {\n\tswitch (check_number_length_for_type(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !is_viable_phone_number(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = strip_extension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n\tvar _parse_national_numbe = parse_national_number_and_country_calling_code(formatted_phone_number, metadata),\n\t    countryCallingCode = _parse_national_numbe.countryCallingCode,\n\t    number = _parse_national_numbe.number;\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar country = void 0;\n\n\t// Attempt to extract country from international phone number.\n\tif (countryCallingCode) {\n\t\t// Sometimes there are several countries\n\t\t// corresponding to the same country phone code\n\t\t// (e.g. NANPA countries all having `1` country phone code).\n\t\t// Therefore, to reliably determine the exact country,\n\t\t// national (significant) number should have been parsed first.\n\t\t//\n\t\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t\t// get their countries populated with the full set of\n\t\t// \"phone number type\" regular expressions.\n\t\t//\n\t\tcountry = find_country_code(countryCallingCode, number, metadata);\n\n\t\tif (country) {\n\t\t\tmetadata.country(country);\n\t\t} else {\n\t\t\t// Formatting information for regions which share\n\t\t\t// a country calling code is contained by only one region\n\t\t\t// for performance reasons. For example, for NANPA region\n\t\t\t// (\"North American Numbering Plan Administration\",\n\t\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t\t// it will be contained in the metadata for `US`.\n\t\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t}\n\t} else if (default_country) {\n\t\tcountry = default_country;\n\t\tmetadata.country(country);\n\t\tcountryCallingCode = metadata.countryCallingCode();\n\t} else return {};\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _parse_national_numbe2 = parse_national_number(number, metadata),\n\t    national_number = _parse_national_numbe2.national_number,\n\t    carrier_code = _parse_national_numbe2.carrier_code;\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnational_number: national_number,\n\t\tcarrierCode: carrier_code\n\t};\n}\n\nfunction parse_national_number(number, metadata) {\n\tvar national_number = parse_phone_number_digits(number);\n\tvar carrier_code = void 0;\n\n\t// Only strip national prefixes for non-international phone numbers\n\t// because national prefixes can't be present in international phone numbers.\n\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\n\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\n\t// and then it would assume that's a valid number which it isn't.\n\t// So no forgiveness for grandmas here.\n\t// The issue asking for this fix:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n\t    potential_national_number = _strip_national_prefi.number,\n\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (check_number_length_for_type(potential_national_number, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnational_number = potential_national_number;\n\t\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matches_entirely(national_number, metadata.nationalNumberPattern()) && !matches_entirely(potential_national_number, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnational_number = potential_national_number;\n\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnational_number: national_number,\n\t\tcarrier_code: carrier_code\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n//# sourceMappingURL=parse.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/parse.js","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nimport parse, { is_viable_phone_number } from './parse';\n\nimport { matches_entirely } from './common';\n\nimport Metadata from './metadata';\n\nvar non_fixed_line_types = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function get_number_type(arg_1, arg_2, arg_3) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3),\n\t    input = _sort_out_arguments.input,\n\t    metadata = _sort_out_arguments.metadata;\n\n\t// When no input was passed\n\n\n\tif (!input) {\n\t\treturn;\n\t}\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar national_number = input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matches_entirely(national_number, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(national_number, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(national_number, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = non_fixed_line_types[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar _type = _step.value;\n\n\t\t\tif (is_of_type(national_number, _type, metadata)) {\n\t\t\t\treturn _type;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function is_of_type(national_number, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(national_number.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matches_entirely(national_number, type.pattern());\n}\n\n// Sort out arguments\nexport function sort_out_arguments(arg_1, arg_2, arg_3) {\n\tvar input = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `getNumberType('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If \"resrict country\" argument is being passed\n\t\t// then convert it to an `options` object.\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\n\t\tif (typeof arg_2 === 'string' || arg_2 === undefined) {\n\t\t\tmetadata = arg_3;\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\tif (is_viable_phone_number(arg_1)) {\n\t\t\t\tinput = parse(arg_1, arg_2, metadata);\n\t\t\t}\n\t\t}\n\t\t// No \"resrict country\" argument is being passed.\n\t\t// International phone number is passed.\n\t\t// `getNumberType('+78005553535', metadata)`.\n\t\telse {\n\t\t\t\tmetadata = arg_2;\n\n\t\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t\t// while this `validate` function needs to verify\n\t\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\t\tif (is_viable_phone_number(arg_1)) {\n\t\t\t\t\tinput = parse(arg_1, metadata);\n\t\t\t\t}\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed phone number.\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n\telse if (is_object(arg_1) && typeof arg_1.phone === 'string') {\n\t\t\t// The `arg_1` must be a valid phone number\n\t\t\t// as a whole, not just a part of it which gets parsed here.\n\t\t\tif (is_viable_phone_number(arg_1.phone)) {\n\t\t\t\tinput = arg_1;\n\t\t\t}\n\n\t\t\tmetadata = arg_2;\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\t// Metadata is required.\n\tif (!metadata || !metadata.countries) {\n\t\tthrow new Error('Metadata is required');\n\t}\n\n\treturn { input: input, metadata: new Metadata(metadata) };\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function check_number_length_for_type(national_number, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn test_number_length_for_type(national_number, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = merge_arrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = merge_arrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = national_number.length;\n\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(national_number.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\nfunction merge_arrays(a, b) {\n\tvar merged = new Set(a);\n\n\tvar _iteratorNormalCompletion2 = true;\n\tvar _didIteratorError2 = false;\n\tvar _iteratorError2 = undefined;\n\n\ttry {\n\t\tfor (var _iterator2 = b[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\tvar i = _step2.value;\n\n\t\t\tmerged.add(i);\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError2 = true;\n\t\t_iteratorError2 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t_iterator2.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError2) {\n\t\t\t\tthrow _iteratorError2;\n\t\t\t}\n\t\t}\n\t}\n\n\tmerged = Array.from(merged);\n\tmerged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\treturn merged;\n}\n//# sourceMappingURL=types.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/types.js","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { is_viable_phone_number } from './parse';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = text.split(';')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar part = _step.value;\n\n\t\t\tvar _part$split = part.split(':'),\n\t\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t\t    name = _part$split2[0],\n\t\t\t    value = _part$split2[1];\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'tel':\n\t\t\t\t\tnumber = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ext':\n\t\t\t\t\text = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'phone-context':\n\t\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\t\tnumber = value + number;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the phone number is not viable, then abort.\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!is_viable_phone_number(number)) {\n\t\treturn {};\n\t}\n\n\treturn {\n\t\tnumber: number,\n\t\text: ext\n\t};\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref) {\n\tvar number = _ref.number,\n\t    ext = _ref.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/RFC3966.js","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { parse_national_number_and_country_calling_code, VALID_PUNCTUATION, matches_entirely } from './common';\n\nimport Metadata from './metadata';\n\nimport { formatRFC3966 } from './RFC3966';\n\nvar default_options = {\n\tformatExtension: function formatExtension(number, extension) {\n\t\treturn number + ' ext. ' + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// format('8005553535', 'RU', 'International')\n\t// format('8005553535', 'RU', 'International', metadata)\n\t// format({ phone: '8005553535', country: 'RU' }, 'International')\n\t// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\n\t// format('+78005553535', 'National')\n\t// format('+78005553535', 'National', metadata)\n\t// ```\n\t//\n};export default function format(arg_1, arg_2, arg_3, arg_4, arg_5) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5),\n\t    input = _sort_out_arguments.input,\n\t    format_type = _sort_out_arguments.format_type,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tif (input.country && metadata.hasCountry(input.country)) {\n\t\tmetadata.country(input.country);\n\t}\n\n\tvar _parse_national_numbe = parse_national_number_and_country_calling_code(input.phone, metadata),\n\t    countryCallingCode = _parse_national_numbe.countryCallingCode,\n\t    number = _parse_national_numbe.number;\n\n\tcountryCallingCode = countryCallingCode || input.countryCallingCode;\n\n\tif (countryCallingCode) {\n\t\t// Check country restriction\n\t\tif (input.country && metadata.selectedCountry() && countryCallingCode !== metadata.countryCallingCode()) {\n\t\t\treturn input.phone;\n\t\t}\n\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\n\tif (!metadata.selectedCountry()) {\n\t\treturn input.phone;\n\t}\n\n\tswitch (format_type) {\n\t\tcase 'International':\n\t\t\tif (!number) {\n\t\t\t\treturn '+' + metadata.countryCallingCode();\n\t\t\t}\n\t\t\tnumber = format_national_number(number, 'International', false, metadata);\n\t\t\tnumber = '+' + metadata.countryCallingCode() + ' ' + number;\n\t\t\treturn add_extension(number, input.ext, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + metadata.countryCallingCode() + input.phone;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + metadata.countryCallingCode() + input.phone,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'National':\n\t\t\tif (!number) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(number, 'National', false, metadata);\n\t\t\treturn add_extension(number, input.ext, options.formatExtension);\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, metadata) {\n\tvar format_pattern_matcher = new RegExp(format.pattern());\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\tvar national_prefix_may_be_omitted = !format.nationalPrefixFormattingRule() || format.nationalPrefixFormattingRule() && format.nationalPrefixIsOptionalWhenFormatting() && !enforce_national_prefix;\n\n\tif (!international && !national_prefix_may_be_omitted) {\n\t\treturn number.replace(format_pattern_matcher, format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()));\n\t}\n\n\tvar formatted_number = number.replace(format_pattern_matcher, international ? format.internationalFormat() : format.format());\n\n\tif (international) {\n\t\treturn local_to_international_style(formatted_number);\n\t}\n\n\treturn formatted_number;\n}\n\nfunction format_national_number(number, format_as, enforce_national_prefix, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\n\tif (!format) {\n\t\treturn number;\n\t}\n\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = available_formats[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar _format = _step.value;\n\n\t\t\t// Validate leading digits\n\t\t\tif (_format.leadingDigitsPatterns().length > 0) {\n\t\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\t\tvar last_leading_digits_pattern = _format.leadingDigitsPatterns()[_format.leadingDigitsPatterns().length - 1];\n\n\t\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check that the national number matches the phone number format regular expression\n\t\t\tif (matches_entirely(national_number, new RegExp(_format.pattern()))) {\n\t\t\t\treturn _format;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\n// Sort out arguments\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5) {\n\tvar input = void 0;\n\tvar format_type = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// Sort out arguments.\n\n\t// If the phone number is passed as a string.\n\t// `format('8005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If country code is supplied.\n\t\t// `format('8005553535', 'RU', 'National', [options], metadata)`.\n\t\tif (typeof arg_3 === 'string') {\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput = {\n\t\t\t\tphone: arg_1,\n\t\t\t\tcountry: arg_2\n\t\t\t};\n\n\t\t\tformat_type = arg_3;\n\n\t\t\tif (arg_5) {\n\t\t\t\toptions = arg_4;\n\t\t\t\tmetadata = arg_5;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_4;\n\t\t\t}\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\t// `format('+78005553535', 'National', [options], metadata)`.\n\t\telse {\n\t\t\t\t// Will be `parse()`d later in code\n\t\t\t\tinput = {\n\t\t\t\t\tphone: arg_1\n\t\t\t\t};\n\n\t\t\t\tif (typeof arg_2 !== 'string') {\n\t\t\t\t\tthrow new Error('Format type argument not passed for `format()`');\n\t\t\t\t}\n\n\t\t\t\tformat_type = arg_2;\n\n\t\t\t\tif (arg_4) {\n\t\t\t\t\toptions = arg_3;\n\t\t\t\t\tmetadata = arg_4;\n\t\t\t\t} else {\n\t\t\t\t\tmetadata = arg_3;\n\t\t\t\t}\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed number object.\n\t// `format({ phone: '8005553535', country: 'RU' }, 'National', [options], metadata)`.\n\telse if (is_object(arg_1) && typeof arg_1.phone === 'string') {\n\t\t\tinput = arg_1;\n\t\t\tformat_type = arg_2;\n\n\t\t\tif (arg_4) {\n\t\t\t\toptions = arg_3;\n\t\t\t\tmetadata = arg_4;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_3;\n\t\t\t}\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\t// Metadata is required.\n\tif (!metadata) {\n\t\tthrow new Error('Metadata is required');\n\t}\n\n\t// Validate `format_type`.\n\tswitch (format_type) {\n\t\tcase 'International':\n\t\tcase 'E.164':\n\t\tcase 'National':\n\t\tcase 'RFC3966':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown format type argument passed to \"format()\": \"' + format_type + '\"');\n\t}\n\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, default_options, options);\n\t} else {\n\t\toptions = default_options;\n\t}\n\n\treturn { input: input, format_type: format_type, options: options, metadata: new Metadata(metadata) };\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\nfunction add_extension(number, ext, formatExtension) {\n\treturn ext ? formatExtension(number, ext) : number;\n}\n//# sourceMappingURL=format.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/format.js","module.exports = {\"version\":\"1.1.5\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"800\":[\"001\"],\"808\":[\"001\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"870\":[\"001\"],\"878\":[\"001\"],\"880\":[\"BD\"],\"881\":[\"001\"],\"882\":[\"001\"],\"883\":[\"001\"],\"886\":[\"TW\"],\"888\":[\"001\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"979\":[\"001\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"[46]\\\\d{4}|[01589]\\\\d{5}\",[5,6]],\"AD\":[\"376\",\"[16]\\\\d{5,8}|[37-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[137-9]|6[0-8]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"180\",\"180[02]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"690\"]]]],\"AE\":[\"971\",\"[2-79]\\\\d{7,8}|800\\\\d{2,9}\",[5,6,7,8,9,10,11,12],[[\"([2-4679])(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-4679][2-8]\"]],[\"(5\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"]],[\"([479]00)(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]00\"],\"$1\"],[\"([68]00)(\\\\d{2,9})\",\"$1 $2\",[\"[68]00\"],\"$1\"]],\"0\",\"0$1\"],\"AF\":[\"93\",\"[2-7]\\\\d{8}\",[9],[[\"([2-7]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"]]],\"0\",\"0$1\"],\"AG\":[\"1\",\"[2589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"268\"],\"AI\":[\"1\",\"[2589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"264\"],\"AL\":[\"355\",\"[2-57]\\\\d{7}|6\\\\d{8}|8\\\\d{5,7}|9\\\\d{5}\",[6,7,8,9],[[\"(4)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[0-6]\"]],[\"(6\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4[7-9]\"]],[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"[235][16-9]|[79]|8[016-9]\"]]],\"0\",\"0$1\"],\"AM\":[\"374\",\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"4[1349]|[5-7]|88|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8|90\"],\"0 $1\"]],\"0\",\"(0$1)\"],\"AO\":[\"244\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\"]]],\"AR\":[\"54\",\"11\\\\d{8}|[2368]\\\\d{9}|9\\\\d{10}\",[10,11],[[\"([68]\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"]],[\"(9)(11)(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"911\"],null,null,\"$1 $2 $3-$4\"],[\"(9)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-4689]|3[3-8])\",\"9(?:2(?:2[013]|3[067]|49|6[01346]|8|9[147-9])|3(?:36|4[1-358]|5[138]|6|7[069]|8[013578]))\",\"9(?:2(?:2(?:0[013-9]|[13])|3(?:0[013-9]|[67])|49|6(?:[0136]|4[0-59])|8|9(?:[19]|44|7[013-9]|8[14]))|3(?:36|4(?:[12]|3[4-6]|[58]4)|5(?:1|3[0-24-689]|8[46])|6|7[069]|8(?:[01]|34|[578][45])))\",\"9(?:2(?:2(?:0[013-9]|[13])|3(?:0[013-9]|[67])|49|6(?:[0136]|4[0-59])|8|9(?:[19]|44|7[013-9]|8[14]))|3(?:36|4(?:[12]|3(?:4|5[014]|6[1-39])|[58]4)|5(?:1|3[0-24-689]|8[46])|6|7[069]|8(?:[01]|34|[578][45])))\"],null,null,\"$1 $2 $3-$4\"],[\"(9)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9[23]\"],null,null,\"$1 $2 $3-$4\"],[\"(11)(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"11\"],null,\"true\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[013]|3[067]|49|6[01346]|8|9[147-9])|3(?:36|4[1-358]|5[138]|6|7[069]|8[013578])\",\"2(?:2(?:0[013-9]|[13])|3(?:0[013-9]|[67])|49|6(?:[0136]|4[0-59])|8|9(?:[19]|44|7[013-9]|8[14]))|3(?:36|4(?:[12]|3[4-6]|[58]4)|5(?:1|3[0-24-689]|8[46])|6|7[069]|8(?:[01]|34|[578][45]))\",\"2(?:2(?:0[013-9]|[13])|3(?:0[013-9]|[67])|49|6(?:[0136]|4[0-59])|8|9(?:[19]|44|7[013-9]|8[14]))|3(?:36|4(?:[12]|3(?:4|5[014]|6[1-39])|[58]4)|5(?:1|3[0-24-689]|8[46])|6|7[069]|8(?:[01]|34|[578][45]))\"],null,\"true\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],null,\"true\"]],\"0\",\"0$1\",\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))?15)?\",\"9$1\"],\"AS\":[\"1\",\"[5689]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"684\"],\"AT\":[\"43\",\"[1-9]\\\\d{3,12}\",[4,5,6,7,8,9,10,11,12,13],[[\"(116\\\\d{3})\",\"$1\",[\"116\"],\"$1\"],[\"(1)(\\\\d{3,12})\",\"$1 $2\",[\"1\"]],[\"(5\\\\d)(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"]],[\"(5\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5[079]\"]],[\"(5\\\\d)(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5[079]\"]],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:[28]0|32)|[89]\"]],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"2|3(?:1[1-578]|[3-8])|4[2378]|5[2-6]|6(?:[12]|4[1-9]|5[468])|7(?:[24][1-8]|35|[5-79])\"]]],\"0\",\"0$1\"],\"AU\":[\"61\",\"1\\\\d{4,9}|[2-578]\\\\d{8}\",[5,6,7,8,9,10],[[\"([2378])(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(16)(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(16)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(1[389]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[389]0\",\"1(?:[38]0|9)0\"]],[\"(180)(2\\\\d{3})\",\"$1 $2\",[\"180\",\"1802\"]],[\"(19\\\\d)(\\\\d{3})\",\"$1 $2\",[\"19[13]\"]],[\"(19\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"19[679]\"]],[\"(13)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"13[1-9]\"]]],\"0\",null,null,null,null,null,[[\"[237]\\\\d{8}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|[6-8]\\\\d{4}|9(?:[02-9]\\\\d{3}|1(?:[0-57-9]\\\\d{2}|6[0135-9]\\\\d)))\\\\d{3}\",[9]],[\"14(?:5\\\\d|71)\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[12457-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"19(?:0[0126]\\\\d|[679])\\\\d{5}\",[8,10]],[\"500\\\\d{6}\",[9]],null,null,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"550\\\\d{6}\",[9]],[\"13(?:00\\\\d{3}|45[0-4]|\\\\d)\\\\d{3}\",[6,8,10]]]],\"AW\":[\"297\",\"[25-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"AX\":[\"358\",\"1\\\\d{5,11}|[35]\\\\d{5,9}|2\\\\d{4,9}|4\\\\d{5,10}|6\\\\d{7,9}|7\\\\d{4,9}|8\\\\d{6,9}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[6-8])0\"]],[\"(75\\\\d{3})\",\"$1\",[\"75[12]\"]],[\"(116\\\\d{3})\",\"$1\",[\"116\"],\"$1\"],[\"(\\\\d{2})(\\\\d{4,10})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"]],[\"(\\\\d)(\\\\d{4,11})\",\"$1 $2\",[\"[25689][1-8]|3\"]]],\"0\",null,null,null,null,null,[[\"18[1-8]\\\\d{3,9}\",[6,7,8,9,10,11,12]],[\"4\\\\d{5,10}|50\\\\d{4,8}\",[6,7,8,9,10,11]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"[67]00\\\\d{5,6}\",[8,9]],null,null,[\"[13]0\\\\d{4,8}|2(?:0(?:[016-8]\\\\d{3,7}|[2-59]\\\\d{2,7})|9\\\\d{4,8})|60(?:[12]\\\\d{5,6}|6\\\\d{7})|7(?:1\\\\d{7}|3\\\\d{8}|5[03-9]\\\\d{2,7})\",[5,6,7,8,9,10]]]],\"AZ\":[\"994\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2(?:[0-36]|[45]2)|365\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[4-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"]],\"0\",\"(0$1)\"],\"BA\":[\"387\",\"[3-9]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-356]|[7-9]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6[047]\"]]],\"0\",\"0$1\"],\"BB\":[\"1\",\"[2589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"246\"],\"BD\":[\"880\",\"[2-79]\\\\d{5,9}|1\\\\d{9}|8[0-7]\\\\d{4,8}\",[6,7,8,9,10],[[\"(2)(\\\\d{7,8})\",\"$1-$2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"[3-79]1\"]],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"1|3(?:0|[2-58]2)|4(?:0|[25]2|3[23]|[4689][25])|5(?:[02-578]2|6[25])|6(?:[0347-9]2|[26][25])|7[02-9]2|8(?:[023][23]|[4-7]2)|9(?:[02][23]|[458]2|6[016])\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"[3-79][2-9]|8\"]]],\"0\",\"0$1\"],\"BE\":[\"32\",\"[1-9]\\\\d{7,8}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4[5-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]|4[23]|9[2-4]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[156]|7[018]|8(?:0[1-9]|[1-79])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"]]],\"0\",\"0$1\"],\"BF\":[\"226\",\"[25-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"BG\":[\"359\",\"[23567]\\\\d{5,7}|[489]\\\\d{6,8}\",[6,7,8,9],[[\"(2)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(2)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[124-7]|70[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[124-7]|70[1-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[78]00\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"99[69]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"48|8[7-9]|9[08]\"]]],\"0\",\"0$1\"],\"BH\":[\"973\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]]],\"BI\":[\"257\",\"[267]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"BJ\":[\"229\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]]],\"BL\":[\"590\",\"[56]\\\\d{8}\",[9],[[\"([56]\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"590|69[01]\"]]],\"0\",null,null,null,null,null,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d{2}|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"BM\":[\"1\",\"[4589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"441\"],\"BN\":[\"673\",\"[2-578]\\\\d{6}\",[7],[[\"([2-578]\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"[23467]\\\\d{7}|8\\\\d{8}\",[8,9],[[\"([234])(\\\\d{7})\",\"$1 $2\",[\"[2-4]\"]],[\"([67]\\\\d{7})\",\"$1\",[\"[67]\"]],[\"(800)(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"800\"]]],\"0\",null,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"[347]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[13-7]\"]],[\"(9)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],null,null,null,null,null,null,[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[145-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"[1-46-9]\\\\d{7,10}|5(?:[0-4]\\\\d{7,9}|5(?:[2-8]\\\\d{7}|9\\\\d{7,8}))\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|40[02]\",\"300|40(?:0|20)\"]],[\"([3589]00)(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3589]00\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"[1-9][1-9]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[1-9][1-9]9\"],\"($1)\"]],\"0\",null,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"[2589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"242\"],\"BT\":[\"975\",\"[1-8]\\\\d{6,7}\",[7,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1|77\"]],[\"([2-8])(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]]]],\"BW\":[\"267\",\"[2-79]\\\\d{6,7}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(7\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(90)(\\\\d{5})\",\"$1 $2\",[\"90\"]]]],\"BY\":[\"375\",\"[1-4]\\\\d{8}|8(?:0(?:0\\\\d{3,7}|[13]\\\\d{7})|(?:10|20\\\\d)\\\\d{7})|9\\\\d{9,10}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"17[0-3589]|2[4-9]|[34]\",\"17(?:[02358]|1[0-2]|9[0189])|2[4-9]|[34]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:5[24]|6[235]|7[467])|2(?:1[246]|2[25]|3[26])\",\"1(?:5[24]|6(?:2|3[04-9]|5[0346-9])|7(?:[46]|7[37-9]))|2(?:1[246]|2[25]|3[26])\"],\"8 0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"([89]\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8[01]|9\"],\"8 $1\"],[\"(82\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"82\"],\"8 $1\"],[\"(800)(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(800)(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"]],\"8\",null,\"8?0?\"],\"BZ\":[\"501\",\"[2-8]\\\\d{6}|0\\\\d{10}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(0)(800)(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"080\",\"0800\"]]]],\"CA\":[\"1\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,null,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:0[04]|13|22|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:(?:00|22|33|44|66|77|88)[2-9]|21[23])\\\\d{6}\"]]],\"CC\":[\"61\",\"[1458]\\\\d{5,9}\",[6,7,8,9,10],[[\"([2378])(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(16)(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(16)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(1[389]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[389]0\",\"1(?:[38]0|9)0\"]],[\"(180)(2\\\\d{3})\",\"$1 $2\",[\"180\",\"1802\"]],[\"(19\\\\d)(\\\\d{3})\",\"$1 $2\",[\"19[13]\"]],[\"(19\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"19[679]\"]],[\"(13)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"13[1-9]\"]]],\"0\",null,null,null,null,null,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:08|22|68)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"14(?:5\\\\d|71)\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[12547-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"19(?:0[0126]\\\\d|[679])\\\\d{5}\",[8,10]],[\"500\\\\d{6}\",[9]],null,null,null,[\"550\\\\d{6}\",[9]],[\"13(?:00\\\\d{2})?\\\\d{4}\",[6,10]]]],\"CD\":[\"243\",\"[2-6]\\\\d{6}|[18]\\\\d{6,8}|9\\\\d{8}\",[7,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"12\"]],[\"([89]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[0-2459]|9\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"]]],\"0\",\"0$1\"],\"CF\":[\"236\",\"[278]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"CG\":[\"242\",\"[028]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"800\"]]]],\"CH\":[\"41\",\"[2-9]\\\\d{8}|860\\\\d{9}\",[9],[[\"([2-9]\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]|[89]1\"]],[\"([89]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"860\"]]],\"0\",\"0$1\"],\"CI\":[\"225\",\"[02-8]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"CK\":[\"682\",\"[2-8]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\"]]],\"CL\":[\"56\",\"1230\\\\d{7}|[2-46-9]\\\\d{8,10}|5[1-3578]\\\\d{7}\",[9,10,11],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[357]|4[1-35]|6[13-57]\"],\"($1)\"],[\"(9)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]],[\"(44)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"([68]00)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[68]00\"],\"$1\"],[\"(600)(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"600\"],\"$1\"],[\"(1230)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"123\",\"1230\"],\"$1\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\"],\"($1)\"]],\"0\",\"0$1\",\"0|(1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))\"],\"CM\":[\"237\",\"[2368]\\\\d{7,8}\",[8,9],[[\"([26])(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]|88\"]]]],\"CN\":[\"86\",\"[1-7]\\\\d{6,11}|8[0-357-9]\\\\d{6,9}|9\\\\d{7,10}\",[7,8,9,10,11,12],[[\"([48]00)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[48]00\"]],[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2\\\\d)[19]\",\"(?:10|2\\\\d)(?:10|9[56])\",\"(?:10|2\\\\d)(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[3-9]\",\"[3-9]\\\\d\\\\d[19]\",\"[3-9]\\\\d\\\\d(?:10|9[56])\"],\"0$1\"],[\"(21)(\\\\d{4})(\\\\d{4,6})\",\"$1 $2 $3\",[\"21\"],\"0$1\",\"true\"],[\"([12]\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10[1-9]|2[02-9]\",\"10[1-9]|2[02-9]\",\"10(?:[1-79]|8(?:0[1-9]|[1-9]))|2[02-9]\"],\"0$1\",\"true\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:1[02-9]|35|49|5|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|[35][2-9]|6[47-9]|7|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[04-9]|4[3-6]|6[2368])|8(?:1[236-8]|2[5-7]|3|5[1-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])\"],\"0$1\",\"true\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:11|7[179])|4(?:[15]1|3[1-35])|5(?:1|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[457]|6[09])|8(?:[57]1|98)\"],\"0$1\",\"true\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"807\",\"8078\"],\"0$1\",\"true\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[3-57-9]|66)\"]],[\"(10800)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"108\",\"1080\",\"10800\"]],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"950\"]]],\"0\",null,\"(1(?:[129]\\\\d{3}|79\\\\d{2}))|0\"],\"CO\":[\"57\",\"(?:[13]\\\\d{0,3}|[24-8])\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1(?:[2-7]|8[2-9]|9[0-3])|[24-8]\",\"1(?:[2-7]|8[2-9]|9(?:09|[1-3]))|[24-8]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(1)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1(?:80|9[04])\",\"1(?:800|9(?:0[01]|4[78]))\"],\"0$1\",null,\"$1 $2 $3\"]],\"0\",null,\"0([3579]|4(?:44|56))?\"],\"CR\":[\"506\",\"[24-9]\\\\d{7,9}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]0\"]]],null,null,\"(19(?:0[012468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"[2-57]\\\\d{5,7}\",[6,7,8],[[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"]],[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"[2-4]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"]],\"0\",\"(0$1)\"],\"CV\":[\"238\",\"[2-59]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\"]]],\"CW\":[\"599\",\"[134679]\\\\d{6,7}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[13-7]\"]],[\"(9)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],null,null,null,null,null,null,[[\"9(?:[48]\\\\d{2}|50\\\\d|7(?:2[0-24]|[34]\\\\d|6[35-7]|77|8[7-9]))\\\\d{4}\",[8]],[\"9(?:5(?:[12467]\\\\d|3[01])|6(?:[15-9]\\\\d|3[01]))\\\\d{4}\",[8]],null,null,null,null,null,[\"955\\\\d{5}\",[8]],null,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"[1458]\\\\d{5,9}\",[6,7,8,9,10],[[\"([2378])(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(16)(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(16)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(1[389]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[389]0\",\"1(?:[38]0|9)0\"]],[\"(180)(2\\\\d{3})\",\"$1 $2\",[\"180\",\"1802\"]],[\"(19\\\\d)(\\\\d{3})\",\"$1 $2\",[\"19[13]\"]],[\"(19\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"19[679]\"]],[\"(13)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"13[1-9]\"]]],\"0\",null,null,null,null,null,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:21|49|78|81)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"14(?:5\\\\d|71)\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[12547-9]|9[017-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"19(?:0[0126]\\\\d|[679])\\\\d{5}\",[8,10]],[\"500\\\\d{6}\",[9]],null,null,null,[\"550\\\\d{6}\",[9]],[\"13(?:00\\\\d{2})?\\\\d{4}\",[6,8,10]]]],\"CY\":[\"357\",\"[257-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\"]]],\"CZ\":[\"420\",\"[2-8]\\\\d{8}|9\\\\d{8,11}\",[9],[[\"([2-9]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(96\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(9\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9[36]\"]]]],\"DE\":[\"49\",\"[1-35-9]\\\\d{3,14}|4(?:[0-8]\\\\d{3,12}|9(?:[0-37]\\\\d|4(?:[1-35-8]|4\\\\d?)|5\\\\d{1,2}|6[1-8]\\\\d?)\\\\d{2,8})\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(1\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"]],[\"(15\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"]],[\"(1\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"15\"]],[\"(\\\\d{2})(\\\\d{3,11})\",\"$1 $2\",[\"3[02]|40|[68]9\"]],[\"(\\\\d{3})(\\\\d{3,11})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14]|[4-9]1)|3(?:[35-9][15]|4[015])|[4-8][1-9]1|9(?:06|[1-9]1)\"]],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|[7-9](?:0[1-9]|[1-9])\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|[46][1246]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|3[1357]|4[13578]|6[1246]|7[1356]|9[1346])|5(?:0[14]|2[1-3589]|3[1357]|[49][1246]|6[1-4]|7[13468]|8[13568])|6(?:0[356]|2[1-489]|3[124-6]|4[1347]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|3[1357]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|4[1347]|6[0135-9]|7[1467]|8[136])|9(?:0[12479]|2[1358]|3[1357]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|[7-9](?:0[1-9]|[1-9])\"]],[\"(3\\\\d{4})(\\\\d{1,10})\",\"$1 $2\",[\"3\"]],[\"(800)(\\\\d{7,12})\",\"$1 $2\",[\"800\"]],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:37|80)|900\",\"1(?:37|80)|900[1359]\"]],[\"(1\\\\d{2})(\\\\d{5,11})\",\"$1 $2\",[\"181\"]],[\"(18\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"]],[\"(18\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"]],[\"(18\\\\d)(\\\\d{8})\",\"$1 $2\",[\"18[2-579]\"]],[\"(700)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"700\"]],[\"(138)(\\\\d{4})\",\"$1 $2\",[\"138\"]],[\"(15[013-68])(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15[013-68]\"]],[\"(15[279]\\\\d)(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"]],[\"(1[67]\\\\d)(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"]]],\"0\",\"0$1\"],\"DJ\":[\"253\",\"[27]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"DK\":[\"45\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"DM\":[\"1\",\"[57-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"767\"],\"DO\":[\"1\",\"[589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"8[024]9\"],\"DZ\":[\"213\",\"(?:[1-4]|[5-9]\\\\d)\\\\d{7}\",[8,9],[[\"([1-4]\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"]],[\"([5-8]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"]],[\"(9\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"]]],\"0\",\"0$1\"],\"EC\":[\"593\",\"1\\\\d{9,10}|[2-8]\\\\d{7}|9\\\\d{8}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[247]|[356][2-8]\"],null,null,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(1800)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"180\",\"1800\"],\"$1\"]],\"0\",\"(0$1)\"],\"EE\":[\"372\",\"[3-9]\\\\d{6,7}|800\\\\d{6,7}\",[7,8,10],[[\"([3-79]\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(70)(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"70\"]],[\"(8000)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"800\",\"8000\"]],[\"([458]\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"40|5|8(?:00|[1-5])\",\"40|5|8(?:00[1-9]|[1-5])\"]]]],\"EG\":[\"20\",\"1\\\\d{4,9}|[24-6]\\\\d{8}|3\\\\d{7}|[89]\\\\d{8,9}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"]],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1(?:3|5[239])|[4-6]|[89][2-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1[0-25]|[89]00\"]]],\"0\",\"0$1\"],\"EH\":[\"212\",\"[5-9]\\\\d{8}\",[9],[[\"([5-7]\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"5(?:2[015-7]|3[0-4])|[67]\"]],[\"([58]\\\\d{3})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|92)|892\",\"5(?:2(?:[2-48]|9[0-7])|3(?:[5-79]|8[0-7])|924)|892\"]],[\"(5\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"]],[\"([5]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:4[067]|5[03])\"]],[\"(8[09])(\\\\d{7})\",\"$1-$2\",[\"8(?:0|9[013-9])\"]]],\"0\",null,null,null,null,\"528[89]\"],\"ER\":[\"291\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\"]],\"0\",\"0$1\"],\"ES\":[\"34\",\"[5-9]\\\\d{8}\",[9],[[\"([89]00)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"([5-9]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[568]|[79][0-8]\"]]]],\"ET\":[\"251\",\"[1-59]\\\\d{8}\",[9],[[\"([1-59]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"]]],\"0\",\"0$1\"],\"FI\":[\"358\",\"1\\\\d{4,11}|[2-9]\\\\d{4,10}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[6-8])0\"]],[\"(75\\\\d{3})\",\"$1\",[\"75[12]\"]],[\"(116\\\\d{3})\",\"$1\",[\"116\"],\"$1\"],[\"(\\\\d{2})(\\\\d{4,10})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"]],[\"(\\\\d)(\\\\d{4,11})\",\"$1 $2\",[\"[25689][1-8]|3\"]]],\"0\",\"0$1\",null,null,null,null,[[\"1(?:[3569][1-8]\\\\d{3,9}|[47]\\\\d{5,10})|2[1-8]\\\\d{3,9}|3(?:[1-8]\\\\d{3,9}|9\\\\d{4,8})|[5689][1-8]\\\\d{3,9}\"],[\"4(?:[0-8]\\\\d{4,9}|9\\\\d{3,8})|50\\\\d{4,8}\",[6,7,8,9,10,11]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"[67]00\\\\d{5,6}\",[8,9]],null,null,[\"[13]0\\\\d{4,8}|2(?:0(?:[016-8]\\\\d{3,7}|[2-59]\\\\d{2,7})|9\\\\d{4,8})|60(?:[12]\\\\d{5,6}|6\\\\d{7})|7(?:1\\\\d{7}|3\\\\d{8}|5[03-9]\\\\d{3,7})\",[5,6,7,8,9,10]]]],\"FJ\":[\"679\",\"[2-9]\\\\d{6}|0\\\\d{10}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]]],\"FK\":[\"500\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"FO\":[\"298\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\"]],null,null,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"[1-9]\\\\d{8}\",[9],[[\"([1-79])(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"]],[\"(8\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"]],\"0\",\"0$1\"],\"GA\":[\"241\",\"0?\\\\d{7}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"GB\":[\"44\",\"\\\\d{7,10}\",[7,9,10],[[\"(7\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"7(?:[1-57-9]|62)\",\"7(?:[1-57-9]|624)\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2|5[56]|7[06]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[02-9]1|1)|3|9[018]\"]],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"]],[\"(1\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"1\"]],[\"(800)(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"]],[\"(845)(46)(4\\\\d)\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"]],[\"(8\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8(?:4[2-5]|7[0-3])\"]],[\"(80\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"]],[\"(800)(\\\\d{6})\",\"$1 $2\",[\"800\"]]],\"0\",\"0$1\",null,null,null,null,[[\"2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{7}|1(?:1(?:3[0-48]|[46][0-4]|5[0-26-9]|[78][0-49])|21[0-7]|31[0-8]|[4-69]1\\\\d)\\\\d{6}|1(?:2(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)|3(?:0\\\\d|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[28][02-57-9]|[37]\\\\d|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|2[024-9]|3[015689]|4[02-9]|5[03-9]|6\\\\d|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0124578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|8\\\\d|9[2-57]))\\\\d{6}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[345])))|3(?:638[2-5]|647[23]|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[123]))|5(?:24(?:3[2-79]|6\\\\d)|276\\\\d|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[567]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|955[0-4])|7(?:26(?:6[13-9]|7[0-7])|442\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|84(?:3[2-58]))|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}|176888[2-46-8]\\\\d{2}|16977[23]\\\\d{3}\",[9,10]],[\"7(?:[1-3]\\\\d{3}|4(?:[0-46-9]\\\\d{2}|5(?:[0-689]\\\\d|7[0-57-9]))|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])\\\\d|7(?:0(?:0[01]|[1-9]\\\\d)|[1-7]\\\\d{2}|8[02-9]\\\\d|9[0-689]\\\\d)|8(?:[014-9]\\\\d|[23][0-8])\\\\d|9(?:[024-9]\\\\d{2}|1(?:[02-9]\\\\d|1[028])|3[0-689]\\\\d))\\\\d{5}\",[10]],[\"80(?:0(?:1111|\\\\d{6,7})|8\\\\d{7})\"],[\"(?:87[123]|9(?:[01]\\\\d|8[2349]))\\\\d{7}\",[10]],[\"70\\\\d{8}\",[10]],null,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[012]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]],[\"8(?:4(?:5464\\\\d|[2-5]\\\\d{7})|70\\\\d{7})\",[7,10]]]],\"GD\":[\"1\",\"[4589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"473\"],\"GE\":[\"995\",\"[34578]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5\"]]],\"0\"],\"GF\":[\"594\",\"[56]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]],\"0\",\"0$1\"],\"GG\":[\"44\",\"[135789]\\\\d{6,9}\",[7,9,10],[[\"(7\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"7(?:[1-57-9]|62)\",\"7(?:[1-57-9]|624)\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2|5[56]|7[06]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[02-9]1|1)|3|9[018]\"]],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"]],[\"(1\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"1\"]],[\"(800)(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"]],[\"(845)(46)(4\\\\d)\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"]],[\"(8\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8(?:4[2-5]|7[0-3])\"]],[\"(80\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"]],[\"(800)(\\\\d{6})\",\"$1 $2\",[\"800\"]]],\"0\",null,null,null,null,null,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:781\\\\d|839\\\\d|911[17])\\\\d{5}\",[10]],[\"80(?:0(?:1111|\\\\d{6,7})|8\\\\d{7})\"],[\"(?:87[123]|9(?:[01]\\\\d|8[0-3]))\\\\d{7}\",[10]],[\"70\\\\d{8}\",[10]],null,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[012]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]],[\"8(?:4(?:5464\\\\d|[2-5]\\\\d{7})|70\\\\d{7})\",[7,10]]]],\"GH\":[\"233\",\"[235]\\\\d{8}|8\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],\"0\",\"0$1\"],\"GI\":[\"350\",\"[256]\\\\d{7}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"[1-689]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\"]]],\"GM\":[\"220\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"GN\":[\"224\",\"[367]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"[56]\\\\d{8}\",[9],[[\"([56]\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"590|69[01]\"]]],\"0\",\"0$1\",null,null,null,null,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d{2}|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"GQ\":[\"240\",\"[23589]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"[26-9]\\\\d{9}\",[10],[[\"([27]\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[2-9]1|[689]\"]],[\"(2\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"2[2-9][02-9]\"]]]],\"GT\":[\"502\",\"[2-7]\\\\d{7}|1[89]\\\\d{9}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"[5689]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"671\"],\"GW\":[\"245\",\"(?:4(?:0\\\\d{5}|4\\\\d{7})|9\\\\d{8})\",[7,9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"44|9[5-7]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]]]],\"GY\":[\"592\",\"[2-46-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"HK\":[\"852\",\"[2-7]\\\\d{7}|8[0-3]\\\\d{6,7}|9\\\\d{4,10}\",[5,6,7,8,9,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|[89](?:0[1-9]|[1-9])\"]],[\"(800)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"800\"]],[\"(900)(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"900\"]],[\"(900)(\\\\d{2,5})\",\"$1 $2\",[\"900\"]]]],\"HN\":[\"504\",\"[237-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\"]]],\"HR\":[\"385\",\"[1-7]\\\\d{5,8}|[89]\\\\d{6,8}\",[6,7,8,9],[[\"(1)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"([2-5]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"]],[\"(9\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"]],[\"(6[01])(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"]],[\"([67]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"]],[\"(80[01])(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"80[01]\"]],[\"(80[01])(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]\"]]],\"0\",\"0$1\"],\"HT\":[\"509\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\"]]],\"HU\":[\"36\",\"[1-9]\\\\d{7,8}\",[8,9],[[\"(1)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"]]],\"06\",\"($1)\"],\"ID\":[\"62\",\"(?:[1-79]\\\\d{6,10}|8\\\\d{7,11})\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,8})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"2[035-9]|[36][02-9]|[4579]\"],\"(0$1)\"],[\"(8\\\\d{2})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"]],[\"(8\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8[1-35-9]\"]],[\"(1)(500)(\\\\d{3})\",\"$1 $2 $3\",[\"150\",\"1500\"],\"$1\"],[\"(177)(\\\\d{6,8})\",\"$1 $2\",[\"177\"]],[\"(800)(\\\\d{5,7})\",\"$1 $2\",[\"800\"]],[\"(804)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"]],[\"(80\\\\d)(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80[79]\"]]],\"0\",\"0$1\"],\"IE\":[\"353\",\"[124-9]\\\\d{6,9}\",[7,8,9,10],[[\"(1)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"40[24]|50[45]\"]],[\"(48)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"48\"]],[\"(818)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"818\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[24-69]|7[14]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"76|8[35-9]\"],\"0$1\"],[\"(8\\\\d)(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8[35-9]5\"],\"0$1\"],[\"(700)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"700\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:5|8[059])\",\"1(?:5|8[059]0)\"],\"$1\"]],\"0\",\"(0$1)\"],\"IL\":[\"972\",\"1\\\\d{6,11}|[2-589]\\\\d{3}(?:\\\\d{3,6})?|6\\\\d{3}|7\\\\d{6,9}\",[4,7,8,9,10,11,12],[[\"([2-489])(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"([57]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(153)(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"153\"]],[\"(1)([7-9]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(1255)(\\\\d{3})\",\"$1-$2\",[\"125\",\"1255\"]],[\"(1200)(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"120\",\"1200\"]],[\"(1212)(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\",\"1212\"]],[\"(1599)(\\\\d{6})\",\"$1-$2\",[\"159\",\"1599\"]],[\"(151)(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"151\"]],[\"(\\\\d{4})\",\"*$1\",[\"[2-689]\"]]],\"0\"],\"IM\":[\"44\",\"[135789]\\\\d{6,9}\",[10],[[\"(7\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"7(?:[1-57-9]|62)\",\"7(?:[1-57-9]|624)\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2|5[56]|7[06]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[02-9]1|1)|3|9[018]\"]],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"]],[\"(1\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"1\"]],[\"(800)(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"]],[\"(845)(46)(4\\\\d)\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"]],[\"(8\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8(?:4[2-5]|7[0-3])\"]],[\"(80\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"]],[\"(800)(\\\\d{6})\",\"$1 $2\",[\"800\"]]],\"0\",null,null,null,null,null,[[\"1624[5-8]\\\\d{5}\"],[\"7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"(?:872299|90[0167]624)\\\\d{4}\"],[\"70\\\\d{8}\"],null,[\"3(?:08162\\\\d|3\\\\d{5}|4(?:40[49]06|5624\\\\d)|7(?:0624\\\\d|2299\\\\d))\\\\d{3}|55\\\\d{8}\"],null,[\"56\\\\d{8}\"],[\"8(?:4(?:40[49]06|5624\\\\d)|70624\\\\d)\\\\d{3}\"]]],\"IN\":[\"91\",\"008\\\\d{9}|1\\\\d{7,12}|[2-9]\\\\d{9,10}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"561\",\"5616\",\"56161\"],\"$1\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"6(?:[09]0|12|2[03689]|3[05-9])|7(?:[02-8]|19|9[037-9])|8(?:0[015-9]|[1-9])|9\",\"6(?:[09]0|127|2(?:0[01]|39|6[02]|8[0-2]|9[04])|3(?:0[01]|5[0-2]|60|7[05]|81|9[02-5]))|7(?:[07]|19[0-5]|2(?:[0235-9]|[14][017-9])|3(?:[025-9]|[134][017-9])|4(?:[0-35689]|[47][017-9])|5(?:[02-46-9]|[15][017-9])|6(?:[02-9]|1[0-257-9])|8(?:[0-79]|8[0189])|9(?:[089]|31|7[02-9]))|8(?:0(?:[01589]|6[67]|7[02-9])|1(?:[0-57-9]|6[07-9])|2(?:[014][07-9]|[235-9])|3(?:[03-57-9]|[126][07-9])|[45]|6(?:[02457-9]|[136][07-9])|7(?:[078][07-9]|[1-69])|8(?:[0-25-9]|3[07-9]|4[047-9])|9(?:[02-9]|1[027-9]))|9\",\"6(?:[09]0|1279|2(?:0[01]|39|6[02]|8[0-2]|9[04])|3(?:0[01]|5[0-2]|60|7[05]|81|9[02-5]))|7(?:0|19[0-5]|2(?:[0235-79]|[14][017-9]|8(?:[0-69]|[78][089]))|3(?:[05-8]|1(?:[0189]|7[5-9])|2(?:[0-49][089]|[5-8])|3[017-9]|4(?:[07-9]|11)|9(?:[01689]|[2-5][089]|7[0189]))|4(?:[056]|1(?:[0135-9]|[24][089])|[29](?:[0-7][089]|[89])|3(?:[0-8][089]|9)|[47](?:[089]|11|7[02-8])|8(?:[0-24-7][089]|[389]))|5(?:[0346-9]|[15][017-9]|2(?:[03-9]|[12][089]))|6(?:[0346-9]|1[0-257-9]|2(?:[0-4]|[5-9][089])|5(?:[0-367][089]|[4589]))|7(?:0(?:[02-9]|1[089])|[1-9])|8(?:[0-79]|8(?:0[0189]|11|8[013-9]|9))|9(?:[089]|313|7(?:[02-8]|9[07-9])))|8(?:0(?:[01589]|6[67]|7(?:[02-8]|9[04-9]))|1(?:[02-57-9]|1(?:[0-35-9]|4[0-46-9])|6(?:[089]|7[02-8]))|2(?:[014](?:[089]|7[02-8])|[235-9])|3(?:[03-57-9]|[16](?:[089]|7[02-7])|2(?:[09]|7[02-8]|8[0-689]))|[45]|6(?:[02457-9]|[136](?:[089]|7[02-8]))|7(?:0[07-9]|[1-69]|[78](?:[089]|7[02-8]))|8(?:[0-25-9]|3(?:[089]|7[02-8])|4(?:[0489]|7[02-8]))|9(?:[02-9]|1(?:[0289]|7[02-8])))|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-9]|80[2-46]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[59][14]|[68][1-9]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1|9[15])|6(?:12|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[23579]|[468][1-9])|[2-8]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"008\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],\"$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"160\",\"1600\"],\"$1\"],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],\"$1\"],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"180\",\"1800\"],\"$1\"],[\"(\\\\d{4})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"186\",\"1860\"],\"$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18[06]\"],\"$1\"]],\"0\",\"0$1\",null,null,true],\"IO\":[\"246\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"IQ\":[\"964\",\"[1-7]\\\\d{7,9}\",[8,9,10],[[\"(1)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"([2-6]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"]],[\"(7\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]]],\"0\",\"0$1\"],\"IR\":[\"98\",\"[1-8]\\\\d{5,9}|9(?:[0-4]\\\\d{8}|9\\\\d{8})\",[6,7,10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"]],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"[1-8]\"]],[\"(\\\\d{4,5})\",\"$1\",[\"96\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"]]],\"0\",\"0$1\"],\"IS\":[\"354\",\"[4-9]\\\\d{6}|38\\\\d{7}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(3\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]]],\"IT\":[\"39\",\"[01589]\\\\d{5,10}|3(?:[12457-9]\\\\d{8}|[36]\\\\d{7,9})\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|55\"]],[\"(0[26])(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(0[26])(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(0\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(0\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][2-46-8]\"]],[\"(0\\\\d{3})(\\\\d{2,6})\",\"$1 $2\",[\"0[13-57-9][2-46-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13]|8(?:00|4[08]|9[59])\",\"[13]|8(?:00|4[08]|9(?:5[5-9]|9))\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\",\"894[5-9]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"]]],null,null,null,null,null,null,[[\"0(?:[26]\\\\d{4,9}|(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2346]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[34578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7})\"],[\"3(?:[12457-9]\\\\d{8}|6\\\\d{7,8}|3\\\\d{7,9})\",[9,10,11]],[\"80(?:0\\\\d{6}|3\\\\d{3})\",[6,9]],[\"0878\\\\d{5}|1(?:44|6[346])\\\\d{6}|89(?:2\\\\d{3}|4(?:[0-4]\\\\d{2}|[5-9]\\\\d{4})|5(?:[0-4]\\\\d{2}|[5-9]\\\\d{6})|9\\\\d{6})\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],null,null,null,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{6}|[17]\\\\d{3})\",[6,9]]]],\"JE\":[\"44\",\"[135789]\\\\d{6,9}\",[10],[[\"(7\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"7(?:[1-57-9]|62)\",\"7(?:[1-57-9]|624)\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2|5[56]|7[06]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[02-9]1|1)|3|9[018]\"]],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"]],[\"(1\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"1\"]],[\"(800)(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"]],[\"(845)(46)(4\\\\d)\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"]],[\"(8\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8(?:4[2-5]|7[0-3])\"]],[\"(80\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"]],[\"(800)(\\\\d{6})\",\"$1 $2\",[\"800\"]]],\"0\",null,null,null,null,null,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:509\\\\d|7(?:00[378]|97[7-9])|829\\\\d|937\\\\d)\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:871206|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],null,[\"3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))\\\\d{4}|55\\\\d{8}\"],[\"76(?:0[012]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"],[\"8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|70002)\\\\d{4}\"]]],\"JM\":[\"1\",\"[589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"876\"],\"JO\":[\"962\",\"[235-9]\\\\d{7,8}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(7)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7[457-9]\"]],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"8[0158]|9\"]]],\"0\",\"0$1\"],\"JP\":[\"81\",\"[1-9]\\\\d{8,9}|00(?:[36]\\\\d{7,14}|7\\\\d{5,7}|8\\\\d{7})\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]0|80[1-9]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))\",\"1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:2[3-6]|3[3-9]|4[2-6]|5[2-8]|[68][2-7]|7[2-689]|9[1-578])|2(?:2[03-689]|3[3-58]|4[0-468]|5[04-8]|6[013-8]|7[06-9]|8[02-57-9]|9[13])|4(?:2[28]|3[689]|6[035-7]|7[05689]|80|9[3-5])|5(?:3[1-36-9]|4[4578]|5[013-8]|6[1-9]|7[2-8]|8[14-7]|9[4-9])|7(?:2[15]|3[5-9]|4[02-9]|6[135-8]|7[0-4689]|9[014-9])|8(?:2[49]|3[3-8]|4[5-8]|5[2-9]|6[35-9]|7[579]|8[03-579]|9[2-8])|9(?:[23]0|4[02-46-9]|5[024-79]|6[4-9]|7[2-47-9]|8[02-7]|9[3-7])\",\"1(?:2[3-6]|3[3-9]|4[2-6]|5(?:[236-8]|[45][2-69])|[68][2-7]|7[2-689]|9[1-578])|2(?:2(?:[04-689]|3[23])|3[3-58]|4[0-468]|5(?:[0468][2-9]|5[78]|7[2-4])|6(?:[0135-8]|4[2-5])|7(?:[0679]|8[2-7])|8(?:[024578]|3[25-9]|9[6-9])|9(?:11|3[2-4]))|4(?:2(?:2[2-9]|8[237-9])|3[689]|6[035-7]|7(?:[059][2-8]|[68])|80|9[3-5])|5(?:3[1-36-9]|4[4578]|5[013-8]|6[1-9]|7[2-8]|8[14-7]|9(?:[4-7]|[89][2-8]))|7(?:2[15]|3[5-9]|4[02-9]|6[135-8]|7[0-4689]|9(?:[017-9]|4[6-8]|5[2-478]|6[2-589]))|8(?:2(?:4[4-8]|9[2-8])|3(?:[3-6][2-9]|7[2-6]|8[2-5])|4[5-8]|5[2-9]|6(?:[37]|5[4-7]|6[2-9]|8[2-8]|9[236-9])|7[579]|8[03-579]|9[2-8])|9(?:[23]0|4[02-46-9]|5[024-79]|6[4-9]|7[2-47-9]|8[02-7]|9(?:3[34]|4[2-69]|[5-7]))\",\"1(?:2[3-6]|3[3-9]|4[2-6]|5(?:[236-8]|[45][2-69])|[68][2-7]|7[2-689]|9[1-578])|2(?:2(?:[04-689]|3[23])|3[3-58]|4[0-468]|5(?:[0468][2-9]|5[78]|7[2-4])|6(?:[0135-8]|4[2-5])|7(?:[0679]|8[2-7])|8(?:[024578]|3[25-9]|9[6-9])|9(?:11|3[2-4]))|4(?:2(?:2[2-9]|8[237-9])|3[689]|6[035-7]|7(?:[059][2-8]|[68])|80|9[3-5])|5(?:3[1-36-9]|4[4578]|5[013-8]|6[1-9]|7[2-8]|8[14-7]|9(?:[4-7]|[89][2-8]))|7(?:2[15]|3[5-9]|4[02-9]|6[135-8]|7[0-4689]|9(?:[017-9]|4[6-8]|5[2-478]|6[2-589]))|8(?:2(?:4[4-8]|9(?:20|[3578]|4[04-9]|6[56]))|3(?:[3-6][2-9]|7(?:[2-5]|6[0-59])|8[2-5])|4[5-8]|5[2-9]|6(?:[37]|5(?:[467]|5[014-9])|6(?:[2-8]|9[02-69])|8[2-8]|9(?:[236-8]|9[23]))|7[579]|8[03-579]|9[2-8])|9(?:[23]0|4[02-46-9]|5[024-79]|6[4-9]|7[2-47-9]|8[02-7]|9(?:3(?:3[02-9]|4[0-24689])|4[2-69]|[5-7]))\",\"1(?:2[3-6]|3[3-9]|4[2-6]|5(?:[236-8]|[45][2-69])|[68][2-7]|7[2-689]|9[1-578])|2(?:2(?:[04-689]|3[23])|3[3-58]|4[0-468]|5(?:[0468][2-9]|5[78]|7[2-4])|6(?:[0135-8]|4[2-5])|7(?:[0679]|8[2-7])|8(?:[024578]|3[25-9]|9[6-9])|9(?:11|3[2-4]))|4(?:2(?:2[2-9]|8[237-9])|3[689]|6[035-7]|7(?:[059][2-8]|[68])|80|9[3-5])|5(?:3[1-36-9]|4[4578]|5[013-8]|6[1-9]|7[2-8]|8[14-7]|9(?:[4-7]|[89][2-8]))|7(?:2[15]|3[5-9]|4[02-9]|6[135-8]|7[0-4689]|9(?:[017-9]|4[6-8]|5[2-478]|6[2-589]))|8(?:2(?:4[4-8]|9(?:20|[3578]|4[04-9]|6(?:5[25]|60)))|3(?:[3-6][2-9]|7(?:[2-5]|6[0-59])|8[2-5])|4[5-8]|5[2-9]|6(?:[37]|5(?:[467]|5[014-9])|6(?:[2-8]|9[02-69])|8[2-8]|9(?:[236-8]|9[23]))|7[579]|8[03-579]|9[2-8])|9(?:[23]0|4[02-46-9]|5[024-79]|6[4-9]|7[2-47-9]|8[02-7]|9(?:3(?:3[02-9]|4[0-24689])|4[2-69]|[5-7]))\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1|2(?:2[37]|5[5-9]|64|78|8[39]|91)|4(?:2[2689]|64|7[347])|5[2-589]|60|8(?:2[124589]|3[279]|[46-9])|9(?:[235-8]|93)\",\"1|2(?:2[37]|5(?:[57]|[68]0|9[19])|64|78|8[39]|917)|4(?:2(?:20|[68]|9[178])|64|7[347])|5[2-589]|60|8(?:2[124589]|3[279]|[46-9])|9(?:[235-8]|93[34])\",\"1|2(?:2[37]|5(?:[57]|[68]0|9(?:17|99))|64|78|8[39]|917)|4(?:2(?:20|[68]|9[178])|64|7[347])|5[2-589]|60|8(?:2[124589]|3[279]|[46-9])|9(?:[235-8]|93(?:31|4))\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"2(?:[34]7|[56]9|74|9[14-79])|82|993\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"3|4(?:2[09]|7[01])|6[1-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2479][1-9]\"]]],\"0\",\"0$1\"],\"KE\":[\"254\",\"20\\\\d{6,7}|[4-9]\\\\d{6,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"7\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"]]],\"0\",\"0$1\",\"005|0\"],\"KG\":[\"996\",\"[235-8]\\\\d{8,9}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]|31[25]\"]],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[36]|[2-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"]]],\"0\",\"0$1\"],\"KH\":[\"855\",\"[1-9]\\\\d{7,9}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\\\\d[1-9]|[2-9]\"],\"0$1\"],[\"(1[89]00)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[89]0\",\"1[89]00\"]]],\"0\"],\"KI\":[\"686\",\"[2458]\\\\d{4}|3\\\\d{4,7}|[67]\\\\d{7}\",[5,8],[],null,null,\"0\"],\"KM\":[\"269\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\"]]],\"KN\":[\"1\",\"[589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"869\"],\"KP\":[\"850\",\"1\\\\d{9}|[28]\\\\d{7}\",[8,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],\"0\",\"0$1\"],\"KR\":[\"82\",\"00(?:3\\\\d{8,9}|7\\\\d{9,11})|[1-7]\\\\d{4,9}|8\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1(?:5[246-9]|6[046-8]|8[03579])\",\"1(?:5(?:22|44|66|77|88|99)|6(?:[07]0|44|6[16]|88)|8(?:00|33|55|77|99))\"],\"$1\"],[\"(\\\\d{5})\",\"$1\",[\"1[016-9]1\",\"1[016-9]11\",\"1[016-9]114\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2[1-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60[2-9]|80\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"1[0-25-9]|(?:3[1-3]|[46][1-4]|5[1-5])[1-9]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]0\"]]],\"0\",\"0$1\",\"0(8[1-46-8]|85\\\\d{2})?\"],\"KW\":[\"965\",\"[12569]\\\\d{6,7}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[16]|2(?:[0-35-9]|4[0-35-9])|52[25]|9[024-9]\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"244|5(?:[015]|6[56])\"]]]],\"KY\":[\"1\",\"[3589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"345\"],\"KZ\":[\"7\",\"(?:33\\\\d|7\\\\d{2}|80[089])\\\\d{7}\",[10],[[\"([3489]\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"]],[\"(7\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]]],\"8\",null,null,null,null,null,[[\"33622\\\\d{5}|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9])|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[234]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[234]\\\\d|5[139])|4(?:2\\\\d|3[1235-9]|59)|5(?:[23]\\\\d|4[01246-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59)))\\\\d{5}\"],[\"7(?:0[012578]|47|6[02-4]|7[15-8]|85)\\\\d{7}\"],[\"800\\\\d{7}\"],[\"809\\\\d{7}\"],[\"808\\\\d{7}\"],null,null,null,[\"751\\\\d{7}\"]]],\"LA\":[\"856\",\"[2-8]\\\\d{7,9}\",[8,9,10],[[\"(20)(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"([2-8]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"]],[\"(30)(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30\"]]],\"0\",\"0$1\"],\"LB\":[\"961\",\"[13-9]\\\\d{6,7}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"([7-9]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7(?:[01]|6[013-9]|8[89]|9[1-3])|[89][01]\"]]],\"0\"],\"LC\":[\"1\",\"[5789]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"758\"],\"LI\":[\"423\",\"6\\\\d{8}|[23789]\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[56]\"]],[\"(69)(7\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"697\"]]],\"0\",null,\"0|10(?:01|20|66)\"],\"LK\":[\"94\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]]],\"0\",\"0$1\"],\"LR\":[\"231\",\"2\\\\d{7,8}|[378]\\\\d{8}|4\\\\d{6}|5\\\\d{6,8}\",[7,8,9],[[\"(2\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"([4-5])(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23578]\"]]],\"0\",\"0$1\"],\"LS\":[\"266\",\"[2568]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]]],\"LT\":[\"370\",\"[3-9]\\\\d{7}\",[8],[[\"([34]\\\\d)(\\\\d{6})\",\"$1 $2\",[\"37|4(?:1|5[45]|6[2-4])\"]],[\"([3-6]\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"3[148]|4(?:[24]|6[09])|528|6\"]],[\"([7-9]\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\"],[\"(5)(2\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"]]],\"8\",\"(8-$1)\",\"[08]\",null,true],\"LU\":[\"352\",\"[24-9]\\\\d{3,10}|3(?:[0-46-9]\\\\d{2,9}|5[013-9]\\\\d{1,8})\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-5]|7[1-9]|[89](?:0[2-9]|[1-9])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-5]|7[1-9]|[89](?:0[2-9]|[1-9])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,4})\",\"$1 $2 $3 $4\",[\"2(?:[12589]|4[12])|[3-5]|7[1-9]|8(?:0[2-9]|[1-9])|9(?:0[2-46-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"70|80[01]|90[015]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],null,null,\"(15(?:0[06]|1[12]|35|4[04]|55|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"[2689]\\\\d{7}\",[8],[[\"([2689]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2689]\"]]]],\"LY\":[\"218\",\"[25679]\\\\d{8}\",[9],[[\"([25-79]\\\\d)(\\\\d{7})\",\"$1-$2\",[\"[25-79]\"]]],\"0\",\"0$1\"],\"MA\":[\"212\",\"[5-9]\\\\d{8}\",[9],[[\"([5-7]\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"5(?:2[015-7]|3[0-4])|[67]\"]],[\"([58]\\\\d{3})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|92)|892\",\"5(?:2(?:[2-48]|9[0-7])|3(?:[5-79]|8[0-7])|924)|892\"]],[\"(5\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"]],[\"([5]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:4[067]|5[03])\"]],[\"(8[09])(\\\\d{7})\",\"$1-$2\",[\"8(?:0|9[013-9])\"]]],\"0\",\"0$1\",null,null,null,null,[[\"5(?:2(?:[015-79]\\\\d|2[02-9]|3[2-57]|4[2-8]|8[235-7])\\\\d|3(?:[0-48]\\\\d|[57][2-9]|6[2-8]|9[3-9])\\\\d|4[067]\\\\d{2}|5[03]\\\\d{2})\\\\d{4}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[067]|6[1267]|7[07]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],null,null,null,null,[\"5924[01]\\\\d{4}\"]]],\"MC\":[\"377\",\"[34689]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"],\"$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"]],[\"(6)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"8\"],\"$1\"]],\"0\",\"0$1\"],\"MD\":[\"373\",\"[235-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"]],[\"([25-7]\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13-9]|[5-7]\"]],[\"([89]\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[89]\"]]],\"0\",\"0$1\"],\"ME\":[\"382\",\"[2-9]\\\\d{7,8}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]|6[036-9]\"]]],\"0\",\"0$1\"],\"MF\":[\"590\",\"[56]\\\\d{8}\",[9],[[\"([56]\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"590|69[01]\"]]],\"0\",null,null,null,null,null,[[\"590(?:0[079]|13|2[79]|30|43|5[0-268]|7[79]|87)\\\\d{4}\"],[\"69(?:0\\\\d{2}|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"MG\":[\"261\",\"[23]\\\\d{8}\",[9],[[\"([23]\\\\d)(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"]]],\"0\",\"0$1\"],\"MH\":[\"692\",\"[2-6]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\"]],\"1\"],\"MK\":[\"389\",\"[2-578]\\\\d{7}\",[8],[[\"(2)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"([347]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"]],[\"([58]\\\\d{2})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"]]],\"0\",\"0$1\"],\"ML\":[\"223\",\"[246-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[246-9]\"]]]],\"MM\":[\"95\",\"[178]\\\\d{5,7}|[24-6]\\\\d{5,8}|9(?:[279]\\\\d{0,2}|5|[34]\\\\d{1,2}|6(?:\\\\d{1,2})?|8(?:\\\\d{2})?)\\\\d{6}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1|2[245]\"]],[\"(2)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"251\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"432|67|81\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-8]\"]],[\"(9)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"]],[\"(9)([34]\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9(?:3[0-36]|4[0-57-9])\"]],[\"(9)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92[56]\"]],[\"(9)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"93\"]]],\"0\",\"0$1\"],\"MN\":[\"976\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"([12]\\\\d)(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"]],[\"([12]2\\\\d)(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"]],[\"([12]\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[12](?:27|[3-5])\",\"[12](?:27|[3-5]\\\\d)2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"],\"$1\"],[\"([12]\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"[12](?:27|[3-5])\",\"[12](?:27|[3-5]\\\\d)[4-9]\"]]],\"0\",\"0$1\"],\"MO\":[\"853\",\"[268]\\\\d{7}\",[8],[[\"([268]\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"[5689]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"670\"],\"MQ\":[\"596\",\"[56]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]],\"0\",\"0$1\"],\"MR\":[\"222\",\"[2-48]\\\\d{7}\",[8],[[\"([2-48]\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"[5689]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"664\"],\"MT\":[\"356\",\"[2357-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]]],\"MU\":[\"230\",\"[2-9]\\\\d{6,7}\",[7,8],[[\"([2-46-9]\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]],[\"(5\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"5\"]]]],\"MV\":[\"960\",\"[346-8]\\\\d{6,9}|9(?:00\\\\d{7}|\\\\d{6})\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]00\"]]]],\"MW\":[\"265\",\"(?:1(?:\\\\d{2})?|[2789]\\\\d{2}|31\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(2\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"31\"]]],\"0\",\"0$1\"],\"MX\":[\"52\",\"[1-9]\\\\d{9,10}\",[10,11],[[\"([358]\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|55|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2467]|3[0-2457-9]|5[089]|8[02-9]|9[0-35-9]\"]],[\"(1)([358]\\\\d)(\\\\d{4})(\\\\d{4})\",\"044 $2 $3 $4\",[\"1(?:33|55|81)\"],\"$1\",null,\"$1 $2 $3 $4\"],[\"(1)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"044 $2 $3 $4\",[\"1(?:[2467]|3[0-2457-9]|5[089]|8[2-9]|9[1-35-9])\"],\"$1\",null,\"$1 $2 $3 $4\"]],\"01\",\"01 $1\",\"0[12]|04[45](\\\\d{10})\",\"1$1\",true],\"MY\":[\"60\",\"[13-9]\\\\d{7,9}\",[8,9,10],[[\"([4-79])(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(3)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"([18]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1[02-46-9][1-9]|8\"],\"0$1\"],[\"(1)([36-8]00)(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]0\",\"1[36-8]00\"]],[\"(11)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"11\"],\"0$1\"],[\"(15[49])(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15[49]\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"[28]\\\\d{7,8}\",[8,9],[[\"([28]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(80\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]]],\"NA\":[\"264\",\"[68]\\\\d{7,8}\",[8,9],[[\"(8\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8[1-35]\"]],[\"(6\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"]],[\"(88)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"]],[\"(870)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"870\"]]],\"0\",\"0$1\"],\"NC\":[\"687\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-46-9]|5[0-4]\"]]]],\"NE\":[\"227\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"09|[289]\"]],[\"(08)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]]]],\"NF\":[\"672\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]]],\"NG\":[\"234\",\"[1-6]\\\\d{5,8}|9\\\\d{5,9}|[78]\\\\d{5,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-6]|7(?:0[1-9]|[1-79])|8[2-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"70|8[01]|90[235-9]\"]],[\"([78]00)(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]00\"]],[\"([78]00)(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]00\"]],[\"(78)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"]]],\"0\",\"0$1\"],\"NI\":[\"505\",\"[125-8]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]]],\"NL\":[\"31\",\"1\\\\d{4,8}|[2-7]\\\\d{8}|[89]\\\\d{6,9}\",[5,6,7,8,9,10],[[\"([1-578]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1[035]|2[0346]|3[03568]|4[0356]|5[0358]|7|8[4578]\"]],[\"([1-5]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"]],[\"(6)(\\\\d{8})\",\"$1 $2\",[\"6[0-57-9]\"]],[\"(66)(\\\\d{7})\",\"$1 $2\",[\"66\"]],[\"(14)(\\\\d{3,4})\",\"$1 $2\",[\"14\"],\"$1\"],[\"([89]0\\\\d)(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"]]],\"0\",\"0$1\"],\"NO\":[\"47\",\"0\\\\d{4}|[2-9]\\\\d{7}\",[5,8],[[\"([489]\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]\"]],[\"([235-7]\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],null,null,null,null,null,null,[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|87|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],null,[\"0\\\\d{4}|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d{2})\\\\d{3}\"],null,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"[1-8]\\\\d{7}|9(?:[1-69]\\\\d{6,8}|7[2-6]\\\\d{5,7}|8\\\\d{8})\",[8,10],[[\"(1)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-69]|7[15-9])\"]],[\"(9\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"9(?:6[013]|7[245]|8)\"],\"$1\"]],\"0\",\"0$1\"],\"NR\":[\"674\",\"[458]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"NU\":[\"683\",\"[1-5]\\\\d{3}\",[4]],\"NZ\":[\"64\",\"6[235-9]\\\\d{6}|[2-57-9]\\\\d{7,9}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"240|[346]|7[2-57-9]|9[1-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:1[1-9]|[69]|7[0-35-9])|70|86\"]],[\"(2\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"90\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|5|[89]0\"]]],\"0\",\"0$1\"],\"OM\":[\"968\",\"(?:5|[279]\\\\d)\\\\d{6}|800\\\\d{5,6}\",[7,8,9],[[\"(2\\\\d)(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"([79]\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]],[\"([58]00)(\\\\d{4,6})\",\"$1 $2\",[\"[58]00\"]]]],\"PA\":[\"507\",\"[1-9]\\\\d{6,7}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]]],\"PE\":[\"51\",\"[14-9]\\\\d{7,8}\",[8,9],[[\"(1)(\\\\d{7})\",\"$1 $2\",[\"1\"]],[\"([4-8]\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[4-7]|8[2-4]\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"]],[\"(9\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"$1\"]],\"0\",\"(0$1)\"],\"PF\":[\"689\",\"4\\\\d{5,7}|8\\\\d{7}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4[09]|8[79]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]]]],\"PG\":[\"675\",\"[1-9]\\\\d{6,7}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[13-689]|27\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"20|7\"]]]],\"PH\":[\"63\",\"1\\\\d{10,12}|2\\\\d{5,7}|[3-7]\\\\d{8}|8\\\\d{7,9}|9\\\\d{9}\",[6,8,9,10,11,12,13],[[\"(2)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(2)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|5(?:22|44)|642|8(?:62|8[245])\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"([3-8]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"81|9\"],\"0$1\"],[\"(1800)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"180\",\"1800\"]],[\"(1800)(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"180\",\"1800\"]]],\"0\"],\"PK\":[\"92\",\"1\\\\d{8}|[2-8]\\\\d{5,11}|9(?:[013-9]\\\\d{4,10}|2\\\\d(?:111\\\\d{6}|\\\\d{3,7}))\",[8,9,10,11,12],[[\"([89]00)(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]00\"],\"0$1\"],[\"(1\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"1\"],\"$1\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2[349]|45|54|60|72|8[2-5]|9[2-469]\",\"(?:2[349]|45|54|60|72|8[2-5]|9[2-469])\\\\d[2-9]\"]],[\"(58\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"58[126]\"]],[\"(3\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(111)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)1\",\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)11\",\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)111\"]],[\"(\\\\d{3})(111)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[349]|45|54|60|72|8[2-5]|9[2-9]\",\"(?:2[349]|45|54|60|72|8[2-5]|9[2-9])\\\\d1\",\"(?:2[349]|45|54|60|72|8[2-5]|9[2-9])\\\\d11\",\"(?:2[349]|45|54|60|72|8[2-5]|9[2-9])\\\\d111\"]]],\"0\",\"(0$1)\"],\"PL\":[\"48\",\"[1-57-9]\\\\d{6,8}|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11[68]|64\"]],[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"26|39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[14]|2[0-57-9]|3[2-4]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145]\"]]]],\"PM\":[\"508\",\"[45]\\\\d{5}\",[6],[[\"([45]\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"]]],\"0\",\"0$1\"],\"PR\":[\"1\",\"[5789]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"787|939\"],\"PS\":[\"970\",\"1\\\\d{9}|[24589]\\\\d{7,8}\",[8,9,10],[[\"([2489])(2\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]2\"]],[\"(5[69]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5[69]\"]],[\"(1[78]00)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[78]0\",\"1[78]00\"],\"$1\"]],\"0\",\"0$1\"],\"PT\":[\"351\",\"[2-46-9]\\\\d{8}\",[9],[[\"(2\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"([2-46-9]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[3-9]|[346-9]\"]]]],\"PW\":[\"680\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"PY\":[\"595\",\"5[0-5]\\\\d{4,7}|[2-46-9]\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9[1-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"870\",\"8700\"]],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"[2-8][1-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8][1-9]\"],\"0$1\"]],\"0\"],\"QA\":[\"974\",\"[2-8]\\\\d{6,7}\",[7,8],[[\"([28]\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"[28]\"]],[\"([3-7]\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"[268]\\\\d{8}\",[9],[[\"([268]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[268]\"]]],\"0\",\"0$1\",null,null,null,\"262|69|8\"],\"RO\":[\"40\",\"[23]\\\\d{5,8}|[7-9]\\\\d{8}\",[6,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"[23]1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23][3-7]|[7-9]\"]],[\"(2\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\"]]],\"0\",\"0$1\"],\"RS\":[\"381\",\"[126-9]\\\\d{4,11}|3(?:[0-79]\\\\d{3,10}|8[2-9]\\\\d{2,9})\",[6,7,8,9,10,11,12],[[\"([23]\\\\d{2})(\\\\d{4,9})\",\"$1 $2\",[\"(?:2[389]|39)0\"]],[\"([1-3]\\\\d)(\\\\d{5,10})\",\"$1 $2\",[\"1|2(?:[0-24-7]|[389][1-9])|3(?:[0-8]|9[1-9])\"]],[\"(6\\\\d)(\\\\d{6,8})\",\"$1 $2\",[\"6\"]],[\"([89]\\\\d{2})(\\\\d{3,9})\",\"$1 $2\",[\"[89]\"]],[\"(7[26])(\\\\d{4,9})\",\"$1 $2\",[\"7[26]\"]],[\"(7[08]\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"7[08]\"]]],\"0\",\"0$1\"],\"RU\":[\"7\",\"[347-9]\\\\d{9}\",[10],[[\"([3489]\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"]],[\"(7\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]]],\"8\",\"8 ($1)\",null,null,true,null,[[\"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\"],[\"9\\\\d{9}\"],[\"80[04]\\\\d{7}\"],[\"80[39]\\\\d{7}\"],[\"808\\\\d{7}\"]]],\"RW\":[\"250\",\"[027-9]\\\\d{7,8}\",[8,9],[[\"(2\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"([7-9]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(0\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\"],\"SA\":[\"966\",\"[15]\\\\d{8}|8\\\\d{9}|92\\\\d{7}\",[9,10],[[\"(1\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1[1-467]\"]],[\"(5\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"]],[\"(92\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"92\"],\"$1\"],[\"(800)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"800\"],\"$1\"],[\"(811)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"811\"]]],\"0\",\"0$1\"],\"SB\":[\"677\",\"[1-9]\\\\d{4,6}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[7-9]\"]]]],\"SC\":[\"248\",\"[24689]\\\\d{5,6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]]],\"SD\":[\"249\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\"]],\"0\",\"0$1\"],\"SE\":[\"46\",\"[1-35-9]\\\\d{5,11}|4\\\\d{6,8}\",[6,7,8,9,10],[[\"(8)(\\\\d{2,3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],null,null,\"$1 $2 $3 $4\"],[\"([1-69]\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90\"],null,null,\"$1 $2 $3 $4\"],[\"([1-469]\\\\d)(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90\"],null,null,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[0-5]|4[0-3])\"],null,null,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[0-5]|4[0-3])\"],null,null,\"$1 $2 $3\"],[\"(7\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"7\"],null,null,\"$1 $2 $3 $4\"],[\"(77)(\\\\d{2})(\\\\d{2})\",\"$1-$2$3\",[\"77\"],null,null,\"$1 $2 $3\"],[\"(20)(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],null,null,\"$1 $2 $3\"],[\"(9[034]\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9[034]\"],null,null,\"$1 $2 $3 $4\"],[\"(9[034]\\\\d)(\\\\d{4})\",\"$1-$2\",[\"9[034]\"],null,null,\"$1 $2\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"25[245]|67[3-6]\"],null,null,\"$1 $2 $3 $4 $5\"]],\"0\",\"0$1\"],\"SG\":[\"65\",\"[36]\\\\d{7}|[17-9]\\\\d{7,10}\",[8,10,11],[[\"([3689]\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(1[89]00)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1[89]0\",\"1[89]00\"]],[\"(7000)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"700\",\"7000\"]],[\"(800)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"800\"]]]],\"SH\":[\"290\",\"[256]\\\\d{4}|8\\\\d{3}\",[4,5],[],null,null,null,null,null,null,[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d{2}\"],[\"[56]\\\\d{4}\",[5]],null,null,null,null,null,null,[\"262\\\\d{2}\",[5]]]],\"SI\":[\"386\",\"[1-7]\\\\d{6,7}|[89]\\\\d{4,7}\",[5,6,7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|[34][24-8]|5[2-8]|7[3-8]\"],\"(0$1)\"],[\"([3-7]\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"]],[\"([89][09])(\\\\d{3,6})\",\"$1 $2\",[\"[89][09]\"]],[\"([58]\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"59|8[1-3]\"]]],\"0\",\"0$1\"],\"SJ\":[\"47\",\"0\\\\d{4}|[45789]\\\\d{7}\",[5,8],[[\"([489]\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]\"]],[\"([235-7]\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],null,null,null,null,null,null,[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],null,[\"0\\\\d{4}|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d{2})\\\\d{3}\"],null,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"(?:[2-68]\\\\d{5,8}|9\\\\d{6,8})\",[6,7,9],[[\"(2)(1[67])(\\\\d{3,4})\",\"$1 $2 $3\",[\"21[67]\"]],[\"([3-5]\\\\d)(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5]\"]],[\"(2)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"]],[\"([3-5]\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"]],[\"([689]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"]],[\"(9090)(\\\\d{3})\",\"$1 $2\",[\"909\",\"9090\"]]],\"0\",\"0$1\"],\"SL\":[\"232\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\"]],\"0\",\"(0$1)\"],\"SM\":[\"378\",\"[05-7]\\\\d{7,9}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(0549)(\\\\d{6})\",\"$1 $2\",[\"054\",\"0549\"],null,null,\"($1) $2\"],[\"(\\\\d{6})\",\"0549 $1\",[\"[89]\"],null,null,\"(0549) $1\"]],null,null,\"([89]\\\\d{5})\",\"0549$1\"],\"SN\":[\"221\",\"[3789]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"SO\":[\"252\",\"[1-9]\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[13-5]|2[0-79]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"15|28|6[1-35-9]|799|9[2-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3[59]|4[89]|6[24-6]|79|8[08]|90\"]]],\"0\"],\"SR\":[\"597\",\"[2-8]\\\\d{5,6}\",[6,7],[[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|5[2-58]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",null,\"0$1\"]],\"0\"],\"ST\":[\"239\",\"[29]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\"]]],\"SV\":[\"503\",\"[267]\\\\d{7}|[89]\\\\d{6}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"[5789]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"721\"],\"SY\":[\"963\",\"[1-59]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"]],[\"(9\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",\"0$1\",null,null,true],\"SZ\":[\"268\",\"[027]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[027]\"]]]],\"TA\":[\"290\",\"8\\\\d{3}\",[4],[],null,null,null,null,null,null,[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"[5689]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"649\"],\"TD\":[\"235\",\"[2679]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\"]]],\"TG\":[\"228\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"1\\\\d{8,9}|[2-9]\\\\d{7,8}\",[8,9,10],[[\"(2)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"([13-9]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"]],[\"(1[89]00)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[89]0\",\"1[89]00\"],\"$1\"]],\"0\",\"0$1\"],\"TJ\":[\"992\",\"[3-57-9]\\\\d{8}\",[9],[[\"([349]\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"([457-9]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[148]|[578]|9(?:[0235-9]|1[59])\"]],[\"(331700)(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\",\"33170\",\"331700\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\",\"3(?:[1245]|3(?:[02-9]|1[0-589]))\"]]],\"8\",null,null,null,true],\"TK\":[\"690\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"[2-489]\\\\d{6}|7\\\\d{6,7}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7[3-8]\"]]]],\"TM\":[\"993\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"13|[2-5]\"]]],\"8\",\"(8 $1)\"],\"TN\":[\"216\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\"]]],\"TO\":[\"676\",\"[02-8]\\\\d{4,6}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[1-6]|7[0-4]|8[05]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"7[5-9]|8[47-9]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]]]],\"TR\":[\"90\",\"[2-589]\\\\d{9}|444\\\\d{4}\",[7,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]|4(?:[0-35-9]|4[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[02-69]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"51|[89]\"],\"0$1\"],[\"(444)(\\\\d{1})(\\\\d{3})\",\"$1 $2 $3\",[\"444\"]]],\"0\",null,null,null,true],\"TT\":[\"1\",\"[589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"868\"],\"TV\":[\"688\",\"[279]\\\\d{4,6}\",[5,6,7]],\"TW\":[\"886\",\"2\\\\d{6,8}|[3-689]\\\\d{7,8}|7\\\\d{7,9}\",[7,8,9,10],[[\"(20)(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"]],[\"([258]0)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[013-9]|50[0-46-9]|80[0-79]\"]],[\"([2-8])(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25][2-8]|[346]|[78][1-9]\"]],[\"(9\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]],[\"(70)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"70\"]]],\"0\",\"0$1\"],\"TZ\":[\"255\",\"\\\\d{9}\",[7,9],[[\"([24]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"]],[\"([67]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"]],[\"([89]\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],\"0\",\"0$1\"],\"UA\":[\"380\",\"[3-9]\\\\d{8}\",[9],[[\"([3-9]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[38]9|4(?:[45][0-5]|87)|5(?:0|[67][37])|6[36-8]|7|9[1-9]\",\"[38]9|4(?:[45][0-5]|87)|5(?:0|6(?:3[14-7]|7)|7[37])|6[36-8]|7|9[1-9]\"]],[\"([3-689]\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:3[1-8]|4[136-8])2|5(?:[12457]2|6[24])|6(?:[12][29]|[49]2|5[24])|8[0-8]|90\",\"3(?:[1-46-8]2[013-9]|52)|4(?:[1378]2|62[013-9])|5(?:[12457]2|6[24])|6(?:[12][29]|[49]2|5[24])|8[0-8]|90\"]],[\"([3-6]\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"3(?:[1-46-8]|5[013-9])|4(?:[137][013-9]|[45][6-9]|6|8[4-6])|5(?:[1245][013-9]|3|6[0135689]|7[4-6])|6(?:[12][13-8]|[49][013-9]|5[0135-9])\",\"3(?:[1-46-8](?:[013-9]|22)|5[013-9])|4(?:[137][013-9]|[45][6-9]|6(?:[013-9]|22)|8[4-6])|5(?:[1245][013-9]|3|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][13-8]|[49][013-9]|5[0135-9])\"]]],\"0\",\"0$1\"],\"UG\":[\"256\",\"\\\\d{9}\",[9],[[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"20[0-8]|4(?:6[45]|[7-9])|[7-9]\",\"20(?:[013-8]|2[5-9])|4(?:6[45]|[7-9])|[7-9]\"]],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"3|4(?:[1-5]|6[0-36-9])\"]],[\"(2024)(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"]]],\"0\",\"0$1\"],\"US\":[\"1\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,true,null,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[026]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[16]|5[017]|6[0-279]|78|8[012])|7(?:0[1-46-8]|1[02-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|28|3[0-258]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[014678]|4[0179]|5[12469]|7[0-3589]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:(?:00|22|33|44|66|77|88)[2-9]|21[23])\\\\d{6}\"]]],\"UY\":[\"598\",\"[2489]\\\\d{6,7}\",[7,8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]0\"],\"0$1\"]],\"0\"],\"UZ\":[\"998\",\"[679]\\\\d{8}\",[9],[[\"([679]\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"]]],\"8\",\"8 $1\"],\"VA\":[\"39\",\"(?:0(?:878\\\\d{5}|6698\\\\d{5})|[1589]\\\\d{5,10}|3(?:[12457-9]\\\\d{8}|[36]\\\\d{7,9}))\",[6,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|55\"]],[\"(0[26])(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(0[26])(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(0\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(0\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][2-46-8]\"]],[\"(0\\\\d{3})(\\\\d{2,6})\",\"$1 $2\",[\"0[13-57-9][2-46-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13]|8(?:00|4[08]|9[59])\",\"[13]|8(?:00|4[08]|9(?:5[5-9]|9))\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\",\"894[5-9]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"]]],null,null,null,null,null,null,[[\"06698\\\\d{5}\",[10]],[\"3(?:[12457-9]\\\\d{8}|6\\\\d{7,8}|3\\\\d{7,9})\",[9,10,11]],[\"80(?:0\\\\d{6}|3\\\\d{3})\",[6,9]],[\"0878\\\\d{5}|1(?:44|6[346])\\\\d{6}|89(?:2\\\\d{3}|4(?:[0-4]\\\\d{2}|[5-9]\\\\d{4})|5(?:[0-4]\\\\d{2}|[5-9]\\\\d{6})|9\\\\d{6})\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],null,null,null,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{6}|[17]\\\\d{3})\",[6,9]]]],\"VC\":[\"1\",\"[5789]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"784\"],\"VE\":[\"58\",\"[24589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\"]],\"0\",\"0$1\"],\"VG\":[\"1\",\"[2589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"284\"],\"VI\":[\"1\",\"[3589]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,\"$1-$2-$3\"]],\"1\",null,null,null,null,\"340\"],\"VN\":[\"84\",\"1\\\\d{6,9}|2\\\\d{9}|6\\\\d{6,7}|7\\\\d{6}|8\\\\d{6,8}|9\\\\d{8}\",[7,8,9,10],[[\"([17]99)(\\\\d{4})\",\"$1 $2\",[\"[17]99\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"]],[\"(80)(\\\\d{5})\",\"$1 $2\",[\"80\"]],[\"(69\\\\d)(\\\\d{4,5})\",\"$1 $2\",[\"69\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2[0-35-79]\"]],[\"([89]\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8(?:8|9[89])|9\"]],[\"(1[2689]\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:[26]|8[68]|99)\"]],[\"(86[89])(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"86[89]\"]],[\"(1[89]00)(\\\\d{4,6})\",\"$1 $2\",[\"1[89]0\",\"1[89]00\"],\"$1\"]],\"0\",\"0$1\",null,null,true],\"VU\":[\"678\",\"[2-57-9]\\\\d{4,6}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]]],\"WF\":[\"681\",\"[4-8]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\"]]],\"WS\":[\"685\",\"[2-8]\\\\d{4,6}\",[5,6,7],[[\"(8\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8\"]],[\"(7\\\\d)(\\\\d{5})\",\"$1 $2\",[\"7\"]],[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]]]],\"XK\":[\"383\",\"[23][89]\\\\d{6,7}|4[3-79]\\\\d{6}|[89]00\\\\d{5}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23][89]|4[3-79]\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\"]],\"0\",\"0$1\"],\"YE\":[\"967\",\"[1-7]\\\\d{6,8}\",[7,8,9],[[\"([1-7])(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"]],[\"(7\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7[0137]\"]]],\"0\",\"0$1\"],\"YT\":[\"262\",\"[268]\\\\d{8}\",[9],[[\"([268]\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[268]\"]]],\"0\",null,null,null,null,\"269|63\"],\"ZA\":[\"27\",\"[1-79]\\\\d{8}|8\\\\d{4,8}\",[5,6,7,8,9],[[\"(860)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"]],[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-79]|8(?:[0-57]|6[1-9])\"]]],\"0\",\"0$1\"],\"ZM\":[\"260\",\"[289]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",null,\"$1\"],[\"([1-8])(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"$1\"],[\"([29]\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[29]\"]],[\"(800)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"800\"]]],\"0\",\"0$1\"],\"ZW\":[\"263\",\"2(?:[0-57-9]\\\\d{3,8}|6(?:[14]\\\\d{7}|\\\\d{4}))|[13-69]\\\\d{4,9}|7\\\\d{8}|8[06]\\\\d{5,8}\",[5,6,7,8,9,10],[[\"([49])(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"4|9[2-9]\"]],[\"(7\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(86\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"86[24]\"]],[\"([2356]\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8|[78])|3(?:[09]8|17|3[78]|7[1569]|8[37])|5[15][78]|6(?:[29]8|37|[68][78]|75)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|31|[56][14]|7[35]|84)|329\"]],[\"([1-356]\\\\d)(\\\\d{3,5})\",\"$1 $2\",[\"1[3-9]|2[02569]|3[0-69]|5[05689]|6\"]],[\"([235]\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[23]9|54\"]],[\"([25]\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258[23]|5483\"]],[\"(8\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"86\"]],[\"(80\\\\d)(\\\\d{4})\",\"$1 $2\",[\"80\"]]],\"0\",\"0$1\"],\"001\":[\"979\",\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]]]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./metadata.min.json\n// module id = 6\n// module chunks = 0","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n\nimport Metadata from './metadata';\n\nimport { matches_entirely, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, parse_phone_number_digits, parse_national_number_and_country_calling_code } from './common';\n\nimport { extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, local_to_international_style } from './format';\n\nimport { check_number_length_for_type } from './types';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\nvar DUMMY_DIGIT_MATCHER = new RegExp(DUMMY_DIGIT, 'g');\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\nvar DIGIT_PLACEHOLDER_MATCHER_GLOBAL = new RegExp(DIGIT_PLACEHOLDER, 'g');\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CHARACTER_CLASS_PATTERN = /\\[([^\\[\\]])*\\]/g;\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar STANDALONE_DIGIT_PATTERN = /\\d(?=[^,}][^,}])/g;\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\t/**\r\n  * @param {string} [country_code] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(country_code, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (country_code && this.metadata.hasCountry(country_code)) {\n\t\t\tthis.default_country = country_code;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!matches_entirely(extracted_number, VALID_INCOMPLETE_PHONE_NUMBER_PATTERN)) {\n\t\t\t\treturn this.current_output;\n\t\t\t}\n\n\t\t\treturn this.process_input(parse_phone_number_digits(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'process_input',\n\t\tvalue: function process_input(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsed_input) {\n\t\t\t\t\tthis.parsed_input += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.reset_countriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsed_input += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.national_number += input;\n\n\t\t\t// TODO: Deprecated: rename `this.national_number`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.is_international()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// No need to format anything\n\t\t\t\t\t// if there's no national phone number.\n\t\t\t\t\t// (e.g. just the country calling code)\n\t\t\t\t\tif (!this.national_number) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsed_input;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extract_country_calling_code()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsed_input;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.national_prefix;\n\t\t\t\tthis.national_number = this.national_prefix + this.national_number;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extract_national_prefix();\n\n\t\t\t\tif (this.national_prefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = this.available_formats;\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.should_format()) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.format_national_phone_number(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.full_phone_number(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.parsed_input;\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\tif (this.is_international() && this.countryCallingCode) {\n\t\t\t\tif (this.national_number) {\n\t\t\t\t\t// For convenience, the public `.template` property\n\t\t\t\t\t// contains the whole international number\n\t\t\t\t\t// if the phone number being input is international:\n\t\t\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t\t\t// a spacebar and then the template for the national number digits.\n\t\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + repeat(DIGIT_PLACEHOLDER, this.national_number.length);\n\n\t\t\t\t\treturn '+' + this.countryCallingCode + ' ' + this.national_number;\n\t\t\t\t}\n\n\t\t\t\treturn '+' + this.countryCallingCode;\n\t\t\t}\n\n\t\t\treturn this.parsed_input;\n\t\t}\n\t}, {\n\t\tkey: 'format_national_phone_number',\n\t\tvalue: function format_national_phone_number(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosen_format) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from format_next_national_number_digits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\t// if (this.country)\n\t\t\t\t// {\n\t\t\t\t// \tthis.valid = true\n\t\t\t\t// }\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.choose_another_format()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformat_national_number();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsed_input = '';\n\n\t\t\tthis.current_output = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.national_prefix = '';\n\n\t\t\tthis.national_number = '';\n\n\t\t\tthis.reset_countriness();\n\n\t\t\tthis.reset_format();\n\n\t\t\t// this.valid = false\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'reset_country',\n\t\tvalue: function reset_country() {\n\t\t\tif (this.is_international()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.default_country;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_countriness',\n\t\tvalue: function reset_countriness() {\n\t\t\tthis.reset_country();\n\n\t\t\tif (this.default_country && !this.is_international()) {\n\t\t\t\tthis.metadata.country(this.default_country);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = this.available_formats;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_format',\n\t\tvalue: function reset_format() {\n\t\t\tthis.chosen_format = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformat_national_number',\n\t\tvalue: function reformat_national_number() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.format_next_national_number_digits(this.national_number);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = this.available_formats;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.national_number;\n\n\t\t\t// \"leading digits\" pattern list starts with\n\t\t\t// one of a maximum length of 3 digits,\n\t\t\t// and then with each additional digit\n\t\t\t// a more precise \"leading digits\" pattern is specified.\n\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\tthis.matching_formats = this.matching_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_pattern_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// Keep everything that isn't restricted by leading digits.\n\t\t\t\tif (leading_digits_pattern_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_pattern_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1) {\n\t\t\t\tthis.reset_format();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'should_format',\n\t\tvalue: function should_format() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Google could have provided leading digits patterns starting\n\t\t\t// with a single digit but they chose not to (for whatever reasons).\n\t\t\t//\n\t\t\treturn this.national_number >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = this.matching_formats[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar format = _step.value;\n\n\t\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\t\tif (!matcher.test(this.national_number)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.is_format_applicable(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\t\tvar formatted_number = format_national_number_using_format(this.national_number, format, this.is_international(), this.national_prefix.length > 0, this.metadata);\n\n\t\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t\t//\n\t\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t\t// with the current metadata,\n\t\t\t\t\t// but just in case.\n\t\t\t\t\t//\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (this.create_formatting_template(format)) {\n\t\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\t\tthis.reformat_national_number();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\t\tvar full_number = this.full_phone_number(formatted_number);\n\t\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn formatted_number;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'full_phone_number',\n\t\tvalue: function full_phone_number(formatted_national_number) {\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formatted_national_number;\n\t\t\t}\n\n\t\t\treturn formatted_national_number;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extract_country_calling_code',\n\t\tvalue: function extract_country_calling_code() {\n\t\t\tvar _parse_national_numbe = parse_national_number_and_country_calling_code(this.parsed_input, this.metadata),\n\t\t\t    countryCallingCode = _parse_national_numbe.countryCallingCode,\n\t\t\t    number = _parse_national_numbe.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\t\t\tthis.national_number = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extract_national_prefix',\n\t\tvalue: function extract_national_prefix() {\n\t\t\tthis.national_prefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\n\t\t\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\n\t\t\t// and then it would assume that's a valid number which it isn't.\n\t\t\t// So no forgiveness for grandmas here.\n\t\t\t// The issue asking for this fix:\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.national_number, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number;\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\n\n\t\t\tif (!this.metadata.possibleLengths() || this.is_possible_number(this.national_number) && !this.is_possible_number(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\tvar national_number_rule = new RegExp(this.metadata.nationalNumberPattern());\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matches_entirely(this.national_number, national_number_rule) && !matches_entirely(potential_national_number, national_number_rule)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - potential_national_number.length);\n\t\t\tthis.national_number = potential_national_number;\n\n\t\t\treturn this.national_prefix;\n\t\t}\n\t}, {\n\t\tkey: 'is_possible_number',\n\t\tvalue: function is_possible_number(number) {\n\t\t\tvar validation_result = check_number_length_for_type(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.is_international()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'choose_another_format',\n\t\tvalue: function choose_another_format() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = this.matching_formats[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar format = _step2.value;\n\n\t\t\t\t\t// If this format is currently being used\n\t\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\t\tif (this.chosen_format === format) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t\t// then extract the template from this format\n\t\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\t\tif (!this.is_format_applicable(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.create_formatting_template(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t\t// using the old template needs to be reset.\n\t\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// No format matches the phone number,\n\t\t\t\t// therefore set `country` to `undefined`\n\t\t\t\t// (or to the default country).\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.reset_country();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.reset_format();\n\t\t}\n\t}, {\n\t\tkey: 'is_format_applicable',\n\t\tvalue: function is_format_applicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix,\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.is_international() && !this.national_prefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'create_formatting_template',\n\t\tvalue: function create_formatting_template(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.get_template_for_phone_number_format_pattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.is_international()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'get_template_for_phone_number_format_pattern',\n\t\tvalue: function get_template_for_phone_number_format_pattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern()\n\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t.replace(CHARACTER_CLASS_PATTERN, '\\\\d')\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t.replace(STANDALONE_DIGIT_PATTERN, '\\\\d');\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.get_format_format(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.national_number : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(DUMMY_DIGIT_MATCHER, DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'format_next_national_number_digits',\n\t\tvalue: function format_next_national_number_digits(digits) {\n\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\tvar _didIteratorError3 = false;\n\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator3 = digits[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\tvar digit = _step3.value;\n\n\t\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t\t// in a subsequent `this.choose_another_format()` call\n\t\t\t\t\t\t// later in code.\n\t\t\t\t\t\tthis.chosen_format = undefined;\n\t\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t\t}\n\n\t\t\t\t// Return the formatted phone number so far\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t_iteratorError3 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn close_dangling_braces(this.partially_populated_template, this.last_match_position + 1).replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ');\n\t\t}\n\t}, {\n\t\tkey: 'is_international',\n\t\tvalue: function is_international() {\n\t\t\treturn this.parsed_input && this.parsed_input[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'get_format_format',\n\t\tvalue: function get_format_format(format) {\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn local_to_international_style(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.national_prefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determine_the_country',\n\t\tvalue: function determine_the_country() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.national_number, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.national_number;\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\tvar _iteratorNormalCompletion4 = true;\n\tvar _didIteratorError4 = false;\n\tvar _iteratorError4 = undefined;\n\n\ttry {\n\t\tfor (var _iterator4 = string[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\tvar character = _step4.value;\n\n\t\t\tif (character === symbol) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError4 = true;\n\t\t_iteratorError4 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t_iterator4.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError4) {\n\t\t\t\tthrow _iteratorError4;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/AsYouType.js","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parse from './parse';\nimport Metadata from './metadata';\n\nimport { PLUS_CHARS, VALID_PUNCTUATION, VALID_DIGITS,\n// OPENING_BRACKETS,\nWHITESPACE, create_extension_pattern } from './common';\n\n// Copy-pasted from `./parse.js`.\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');\nvar WHITESPACE_IN_THE_END_PATTERN = new RegExp('[' + WHITESPACE + ']+$');\n\n// // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nexport default function findPhoneNumbers(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tvar search = new PhoneNumberSearch(text, options, metadata.metadata);\n\n\tvar phones = [];\n\n\twhile (search.hasNext()) {\n\t\tphones.push(search.next());\n\t}\n\n\treturn phones;\n}\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport function searchPhoneNumbers(arg_1, arg_2, arg_3, arg_4) {\n\tvar _sort_out_arguments2 = sort_out_arguments(arg_1, arg_2, arg_3, arg_4),\n\t    text = _sort_out_arguments2.text,\n\t    options = _sort_out_arguments2.options,\n\t    metadata = _sort_out_arguments2.metadata;\n\n\tvar search = new PhoneNumberSearch(text, options, metadata.metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (search.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: search.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\nexport var PhoneNumberSearch = function () {\n\tfunction PhoneNumberSearch(text) {\n\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\tvar metadata = arguments[2];\n\n\t\t_classCallCheck(this, PhoneNumberSearch);\n\n\t\tthis.state = 'NOT_READY';\n\n\t\tthis.text = text;\n\t\tthis.options = options;\n\t\tthis.metadata = metadata;\n\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER +\n\t\t// Phone number extensions\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?', 'ig');\n\n\t\t// this.searching_from = 0\n\t}\n\t// Iteration tristate.\n\n\n\t_createClass(PhoneNumberSearch, [{\n\t\tkey: 'find',\n\t\tvalue: function find() {\n\t\t\tvar matches = this.regexp.exec(this.text);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar number = matches[0];\n\t\t\tvar startsAt = matches.index;\n\n\t\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n\t\t\tstartsAt += matches[0].length - number.length;\n\t\t\tnumber = number.replace(WHITESPACE_IN_THE_END_PATTERN, '');\n\n\t\t\t// // Prepend any opening brackets left behind by the\n\t\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\n\t\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\n\t\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n\t\t\t// if (full_number_starts_at >= 0)\n\t\t\t// {\n\t\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\n\t\t\t// \tstartsAt = full_number_starts_at\n\t\t\t// }\n\t\t\t//\n\t\t\t// this.searching_from = matches.lastIndex\n\n\t\t\tvar result = parse(number, { defaultCountry: this.options.defaultCountry }, this.metadata);\n\n\t\t\tif (result.phone) {\n\t\t\t\tresult.startsAt = startsAt;\n\t\t\t\tresult.endsAt = startsAt + number.length;\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// Tail recursion.\n\t\t\t// Try the next one if this one is not a valid phone number.\n\t\t\treturn this.find();\n\t\t}\n\t}, {\n\t\tkey: 'hasNext',\n\t\tvalue: function hasNext() {\n\t\t\tif (this.state === 'NOT_READY') {\n\t\t\t\tthis.last_match = this.find();\n\n\t\t\t\tif (this.last_match) {\n\t\t\t\t\tthis.state = 'READY';\n\t\t\t\t} else {\n\t\t\t\t\tthis.state = 'DONE';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.state === 'READY';\n\t\t}\n\t}, {\n\t\tkey: 'next',\n\t\tvalue: function next() {\n\t\t\t// Check the state and find the next match as a side-effect if necessary.\n\t\t\tif (!this.hasNext()) {\n\t\t\t\tthrow new Error('No next element');\n\t\t\t}\n\n\t\t\t// Don't retain that memory any longer than necessary.\n\t\t\tvar result = this.last_match;\n\t\t\tthis.last_match = null;\n\t\t\tthis.state = 'NOT_READY';\n\t\t\treturn result;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberSearch;\n}();\n\nexport function sort_out_arguments(arg_1, arg_2, arg_3, arg_4) {\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parse('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed\n\t// then move it to `options`.\n\t// `findNumbers('88005553535', 'RU', [options], metadata)`.\n\tif (typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, arg_3);\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = { defaultCountry: arg_2 };\n\t\t\tmetadata = arg_3;\n\t\t}\n\t}\n\t// No \"default country\" argument is being passed.\n\t// Only international phone numbers are passed.\n\t// `findNumbers('+78005553535', [options], metadata)`.\n\telse {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t}\n\n\t// Metadata is required.\n\tif (!metadata || !metadata.countries) {\n\t\tthrow new Error('Metadata is required');\n\t}\n\n\tif (!options) {\n\t\toptions = {};\n\t}\n\n\t// // Apply default options.\n\t// if (options)\n\t// {\n\t// \toptions = { ...default_options, ...options }\n\t// }\n\t// else\n\t// {\n\t// \toptions = default_options\n\t// }\n\n\treturn { text: text, options: options, metadata: new Metadata(metadata) };\n}\n//# sourceMappingURL=findPhoneNumbers.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/findPhoneNumbers.js","import Metadata from './metadata';\n\nexport default function (country, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(country)) {\n\t\tthrow new Error('Unknown country: ' + country);\n\t}\n\n\treturn metadata.country(country).countryCallingCode();\n}\n//# sourceMappingURL=getCountryCallingCode.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/getCountryCallingCode.js","import parse, { is_viable_phone_number } from './parse';\nimport get_number_type, { sort_out_arguments } from './types';\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(arg_1, arg_2, arg_3) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3),\n\t    input = _sort_out_arguments.input,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tif (!input) {\n\t\treturn false;\n\t}\n\n\tif (!input.country) {\n\t\treturn false;\n\t}\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tmetadata.country(input.country);\n\n\tif (metadata.hasTypes()) {\n\t\treturn get_number_type(input, metadata.metadata) !== undefined;\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=validate.js.map\n\n\n// WEBPACK FOOTER //\n// ./es6/validate.js","import metadata from './metadata.min.json'\r\n\r\nimport parseCustom from './es6/parse'\r\nimport getNumberTypeCustom from './es6/types'\r\nimport formatCustom from './es6/format'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport findPhoneNumbersCustom, { searchPhoneNumbers as searchPhoneNumbersCustom, PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers'\r\nimport AsYouTypeCustom from './es6/AsYouType'\r\nimport getCountryCallingCodeCustom from './es6/getCountryCallingCode'\r\nexport { default as Metadata } from './es6/metadata'\r\nexport { parseRFC3966, formatRFC3966 } from './es6/RFC3966'\r\n\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseCustom.apply(this, parameters)\r\n}\r\n\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getNumberType()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function findPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function PhoneNumberSearch(text, options)\r\n{\r\n\tPhoneNumberSearchCustom.call(this, text, options, metadata)\r\n}\r\n\r\nPhoneNumberSearch.prototype = Object.create(PhoneNumberSearchCustom.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n\r\nexport function AsYouType(country)\r\n{\r\n\tAsYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(AsYouTypeCustom.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport\r\n{\r\n\tdefault as parseCustom\r\n}\r\nfrom './es6/parse'\r\n\r\nexport\r\n{\r\n\t// `DIGITS` are used by `react-phone-number-input`.\r\n\tDIGIT_MAPPINGS as DIGITS\r\n}\r\nfrom './es6/common'\r\n\r\n// Deprecated: remove this in 2.0.0 and make `custom.js` in ES6\r\n// (the old `custom.js` becomes `custom.commonjs.js`).\r\nexport { default as formatCustom }           from './es6/format'\r\nexport { default as isValidNumberCustom }    from './es6/validate'\r\nexport { default as findPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers'\r\nexport { default as getNumberTypeCustom }    from './es6/types'\r\nexport { default as getCountryCallingCodeCustom } from './es6/getCountryCallingCode'\r\n\r\nexport\r\n{\r\n\tdefault as AsYouTypeCustom,\r\n\t// `DIGIT_PLACEHOLDER` is used by `react-phone-number-input`.\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/AsYouType'\r\n\r\nexport function getCountryCallingCode(country)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\r\n\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getCountryCallingCode(country)\r\n}\r\n\r\n// `getPhoneCodeCustom` name is deprecated, use `getCountryCallingCodeCustom` instead.\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\n\n\n// WEBPACK FOOTER //\n// ./index.es6.js","module.exports = function cmp (a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/semver-compare/index.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}